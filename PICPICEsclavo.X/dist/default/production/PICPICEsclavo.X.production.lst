

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Oct 19 02:14:48 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 1.42
    26                           ; Generated 13/04/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4550 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	smallconst
    61  000800                     __psmallconst:
    62                           	opt stack 0
    63  000800  00                 	db	0
    64  000801                     _dpowers:
    65                           	opt stack 0
    66  000801  0001               	dw	1
    67  000803  000A               	dw	10
    68  000805  0064               	dw	100
    69  000807  03E8               	dw	1000
    70  000809  2710               	dw	10000
    71  00080B                     __end_of_dpowers:
    72                           	opt stack 0
    73  0000                     _PORTB	set	3969
    74  0000                     _TXREG	set	4013
    75  0000                     _RCREG	set	4014
    76  0000                     _TRISB	set	3987
    77  0000                     _ADCON1	set	4033
    78  0000                     _OSCCON	set	4051
    79  0000                     _RCSTA	set	4011
    80  0000                     _RCSTAbits	set	4011
    81  0000                     _SPBRG	set	4015
    82  0000                     _SPBRGH	set	4016
    83  0000                     _TXSTA	set	4012
    84  0000                     _BAUDCON	set	4024
    85  0000                     _TRMT	set	32097
    86  0000                     _TXIF	set	31988
    87  0000                     _RCIF	set	31989
    88  0000                     _TRISC6	set	31910
    89  0000                     _TRISC7	set	31911
    90  0000                     _RD2	set	31770
    91  0000                     _RD3	set	31771
    92  0000                     _RD4	set	31772
    93  0000                     _RD5	set	31773
    94  0000                     _RD6	set	31774
    95  0000                     _RD7	set	31775
    96  0000                     _TRISD2	set	31914
    97  0000                     _TRISD3	set	31915
    98  0000                     _TRISD4	set	31916
    99  0000                     _TRISD5	set	31917
   100  0000                     _TRISD6	set	31918
   101  0000                     _TRISD7	set	31919
   102  00080B                     STR_5:
   103  00080B  56                 	db	86	;'V'
   104  00080C  61                 	db	97	;'a'
   105  00080D  6C                 	db	108	;'l'
   106  00080E  6F                 	db	111	;'o'
   107  00080F  72                 	db	114	;'r'
   108  000810  20                 	db	32
   109  000811  25                 	db	37
   110  000812  30                 	db	48	;'0'
   111  000813  33                 	db	51	;'3'
   112  000814  64                 	db	100	;'d'
   113  000815  20                 	db	32
   114  000816  00                 	db	0
   115  000817                     STR_1:
   116  000817  54                 	db	84	;'T'
   117  000818  6F                 	db	111	;'o'
   118  000819  64                 	db	100	;'d'
   119  00081A  6F                 	db	111	;'o'
   120  00081B  20                 	db	32
   121  00081C  4F                 	db	79	;'O'
   122  00081D  4B                 	db	75	;'K'
   123  00081E  00                 	db	0
   124  00081F                     STR_4:
   125  00081F  25                 	db	37
   126  000820  30                 	db	48	;'0'
   127  000821  33                 	db	51	;'3'
   128  000822  64                 	db	100	;'d'
   129  000823  00                 	db	0
   130  000824                     STR_2:
   131  000824  24                 	db	36
   132  000825  00                 	db	0
   133  0000                     
   134                           ; #config settings
   135  000826  00                 	db	0	; dummy byte at the end
   136  0000                     
   137                           	psect	cinit
   138  0010B6                     __pcinit:
   139                           	opt stack 0
   140  0010B6                     start_initialization:
   141                           	opt stack 0
   142  0010B6                     __initialization:
   143                           	opt stack 0
   144  0010B6                     end_of_initialization:
   145                           	opt stack 0
   146  0010B6                     __end_of__initialization:
   147                           	opt stack 0
   148  0010B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   149  0010B8  6EF8               	movwf	tblptru,c
   150  0010BA  0100               	movlb	0
   151  0010BC  EF65  F006         	goto	_main	;jump to C main() function
   152                           tblptru	equ	0xFF8
   153                           
   154                           	psect	cstackCOMRAM
   155  000001                     __pcstackCOMRAM:
   156                           	opt stack 0
   157  000001                     ??_Lcd_Cmd:
   158  000001                     ??_Lcd_Chr_CP:
   159  000001                     ??_isdigit:
   160  000001                     ??_ConfiSerial9600:
   161  000001                     ?___wmul:
   162                           	opt stack 0
   163  000001                     ?___lwdiv:
   164                           	opt stack 0
   165  000001                     ___wmul@multiplier:
   166                           	opt stack 0
   167  000001                     ___lwdiv@dividend:
   168                           	opt stack 0
   169                           
   170                           ; 2 bytes @ 0x0
   171  000001                     	ds	1
   172  000002                     _isdigit$417:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0x1
   176  000002                     	ds	1
   177  000003                     Lcd_Chr_CP@data:
   178                           	opt stack 0
   179  000003                     Lcd_Cmd@data:
   180                           	opt stack 0
   181  000003                     isdigit@c:
   182                           	opt stack 0
   183  000003                     ___wmul@multiplicand:
   184                           	opt stack 0
   185  000003                     ___lwdiv@divisor:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x2
   189  000003                     	ds	1
   190  000004                     ??_Lcd_Init:
   191  000004                     Lcd_Out@x:
   192                           	opt stack 0
   193  000004                     Lcd_Out2@x:
   194                           	opt stack 0
   195                           
   196                           ; 1 bytes @ 0x3
   197  000004                     	ds	1
   198  000005                     Lcd_Init@data:
   199                           	opt stack 0
   200  000005                     Lcd_Out@buffer:
   201                           	opt stack 0
   202  000005                     Lcd_Out2@buffer:
   203                           	opt stack 0
   204  000005                     ___wmul@product:
   205                           	opt stack 0
   206  000005                     ___lwdiv@quotient:
   207                           	opt stack 0
   208  000005                     ConfiSerial9600@AUX:
   209                           	opt stack 0
   210                           
   211                           ; 4 bytes @ 0x4
   212  000005                     	ds	2
   213  000007                     Lcd_Out@y:
   214                           	opt stack 0
   215  000007                     Lcd_Out2@y:
   216                           	opt stack 0
   217  000007                     ___lwdiv@counter:
   218                           	opt stack 0
   219                           
   220                           ; 1 bytes @ 0x6
   221  000007                     	ds	1
   222  000008                     ?___lwmod:
   223                           	opt stack 0
   224  000008                     Lcd_Out@data:
   225                           	opt stack 0
   226  000008                     Lcd_Out2@data:
   227                           	opt stack 0
   228  000008                     ___lwmod@dividend:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x7
   232  000008                     	ds	1
   233  000009                     ConfiSerial9600@SPBRGC:
   234                           	opt stack 0
   235                           
   236                           ; 4 bytes @ 0x8
   237  000009                     	ds	1
   238  00000A                     ___lwmod@divisor:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x9
   242  00000A                     	ds	2
   243  00000C                     ___lwmod@counter:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0xB
   247  00000C                     	ds	1
   248  00000D                     ?_sprintf:
   249                           	opt stack 0
   250  00000D                     sprintf@sp:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0xC
   254  00000D                     	ds	2
   255  00000F                     sprintf@f:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0xE
   259  00000F                     	ds	4
   260  000013                     ??_sprintf:
   261                           
   262                           ; 1 bytes @ 0x12
   263  000013                     	ds	4
   264  000017                     sprintf@ap:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x16
   268  000017                     	ds	2
   269  000019                     sprintf@prec:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x18
   273  000019                     	ds	1
   274  00001A                     sprintf@val:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x19
   278  00001A                     	ds	2
   279  00001C                     sprintf@flag:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0x1B
   283  00001C                     	ds	1
   284  00001D                     sprintf@width:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x1C
   288  00001D                     	ds	2
   289  00001F                     sprintf@c:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x1E
   293  00001F                     	ds	1
   294  000020                     ??_main:
   295                           
   296                           ; 1 bytes @ 0x1F
   297  000020                     	ds	2
   298  000022                     main@buffer:
   299                           	opt stack 0
   300                           
   301                           ; 20 bytes @ 0x21
   302  000022                     	ds	20
   303  000036                     main@espera:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x35
   307  000036                     	ds	2
   308                           tblptru	equ	0xFF8
   309                           
   310 ;;
   311 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   312 ;;
   313 ;; *************** function _main *****************
   314 ;; Defined at:
   315 ;;		line 37 in file "PicPicEsclavo.c"
   316 ;; Parameters:    Size  Location     Type
   317 ;;		None
   318 ;; Auto vars:     Size  Location     Type
   319 ;;  espera          2   53[COMRAM] int 
   320 ;;  buffer         20   33[COMRAM] unsigned char [20]
   321 ;; Return value:  Size  Location     Type
   322 ;;                  1    wreg      void 
   323 ;; Registers used:
   324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   325 ;; Tracked objects:
   326 ;;		On entry : 0/0
   327 ;;		On exit  : 0/0
   328 ;;		Unchanged: 0/0
   329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   330 ;;      Params:         0       0       0       0       0       0       0       0       0
   331 ;;      Locals:        22       0       0       0       0       0       0       0       0
   332 ;;      Temps:          2       0       0       0       0       0       0       0       0
   333 ;;      Totals:        24       0       0       0       0       0       0       0       0
   334 ;;Total ram usage:       24 bytes
   335 ;; Hardware stack levels required when called:    2
   336 ;; This function calls:
   337 ;;		_ConfiSerial9600
   338 ;;		_Lcd_Init
   339 ;;		_Lcd_Out
   340 ;;		_Lcd_Out2
   341 ;;		_OFFRX
   342 ;;		_ONRX
   343 ;;		_sprintf
   344 ;; This function is called by:
   345 ;;		Startup code after reset
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           	psect	text0
   350  000CCA                     __ptext0:
   351                           	opt stack 0
   352  000CCA                     _main:
   353                           	opt stack 29
   354                           
   355                           ;PicPicEsclavo.c: 38: OSCCON= 0b01110010;
   356                           
   357                           ;incstack = 0
   358  000CCA  0E72               	movlw	114
   359  000CCC  6ED3               	movwf	4051,c	;volatile
   360                           
   361                           ;PicPicEsclavo.c: 39: ADCON1= 0x0f;
   362  000CCE  0E0F               	movlw	15
   363  000CD0  6EC1               	movwf	4033,c	;volatile
   364                           
   365                           ;PicPicEsclavo.c: 40: TRISB=255;
   366  000CD2  6893               	setf	3987,c	;volatile
   367                           
   368                           ;PicPicEsclavo.c: 41: char buffer[20];
   369                           ;PicPicEsclavo.c: 42: Lcd_Init();
   370  000CD4  EC5B  F005         	call	_Lcd_Init	;wreg free
   371                           
   372                           ;PicPicEsclavo.c: 43: Lcd_Out(1,1,"Todo OK");
   373  000CD8  0E01               	movlw	1
   374  000CDA  6E04               	movwf	Lcd_Out@x,c
   375  000CDC  0E17               	movlw	low STR_1
   376  000CDE  6E05               	movwf	Lcd_Out@buffer,c
   377  000CE0  0E08               	movlw	high STR_1
   378  000CE2  6E06               	movwf	Lcd_Out@buffer+1,c
   379  000CE4  0E01               	movlw	1
   380  000CE6  EC58  F007         	call	_Lcd_Out
   381  000CEA                     l1412:
   382                           
   383                           ;PicPicEsclavo.c: 47: ConfiSerial9600();
   384  000CEA  EC8C  F007         	call	_ConfiSerial9600	;wreg free
   385                           
   386                           ;PicPicEsclavo.c: 48: ONRX();
   387  000CEE  EC60  F008         	call	_ONRX	;wreg free
   388                           
   389                           ;PicPicEsclavo.c: 50: int espera=1;
   390  000CF2  0E00               	movlw	0
   391  000CF4  6E37               	movwf	main@espera+1,c
   392  000CF6  0E01               	movlw	1
   393  000CF8  6E36               	movwf	main@espera,c
   394                           
   395                           ;PicPicEsclavo.c: 51: while (espera!=0){
   396  000CFA  D044               	goto	l1440
   397  000CFC                     l119:
   398                           
   399                           ;PicPicEsclavo.c: 52: if(RCIF){
   400  000CFC  AA9E               	btfss	3998,5,c	;volatile
   401  000CFE  D040               	goto	l1438
   402                           
   403                           ;PicPicEsclavo.c: 53: if(RCREG=='$'){
   404  000D00  0E24               	movlw	36
   405  000D02  18AE               	xorwf	4014,w,c	;volatile
   406  000D04  A4D8               	btfss	status,2,c
   407  000D06  D025               	goto	l1432
   408                           
   409                           ;PicPicEsclavo.c: 54: Lcd_Out(1,14,"$");
   410  000D08  0E0E               	movlw	14
   411  000D0A  6E04               	movwf	Lcd_Out@x,c
   412  000D0C  0E24               	movlw	low STR_2
   413  000D0E  6E05               	movwf	Lcd_Out@buffer,c
   414  000D10  0E08               	movlw	high STR_2
   415  000D12  6E06               	movwf	Lcd_Out@buffer+1,c
   416  000D14  0E01               	movlw	1
   417  000D16  EC58  F007         	call	_Lcd_Out
   418                           
   419                           ;PicPicEsclavo.c: 56: TXREG= PORTB;
   420  000D1A  CF81 FFAD          	movff	3969,4013	;volatile
   421                           
   422                           ;PicPicEsclavo.c: 57: TXIF=0;
   423  000D1E  989E               	bcf	3998,4,c	;volatile
   424  000D20                     l122:
   425  000D20  A2AC               	btfss	4012,1,c	;volatile
   426  000D22  D7FE               	goto	l122
   427                           
   428                           ;PicPicEsclavo.c: 59: _delay((unsigned long)((200)*(8000000/4000.0)));
   429  000D24  0E03               	movlw	3
   430  000D26  6E21               	movwf	(??_main+1)& (0+255),c
   431  000D28  0E08               	movlw	8
   432  000D2A  6E20               	movwf	??_main& (0+255),c
   433  000D2C  0E77               	movlw	119
   434  000D2E                     u1077:
   435  000D2E  2EE8               	decfsz	wreg,f,c
   436  000D30  D7FE               	bra	u1077
   437  000D32  2E20               	decfsz	??_main& (0+255),f,c
   438  000D34  D7FC               	bra	u1077
   439  000D36  2E21               	decfsz	(??_main+1)& (0+255),f,c
   440  000D38  D7FA               	bra	u1077
   441  000D3A  F000               	nop	
   442                           
   443                           ;PicPicEsclavo.c: 60: Lcd_Out(1,14," ");
   444  000D3C  0E0E               	movlw	14
   445  000D3E  6E04               	movwf	Lcd_Out@x,c
   446  000D40  0E15               	movlw	low (STR_5+10)
   447  000D42  6E05               	movwf	Lcd_Out@buffer,c
   448  000D44  0E08               	movlw	high (STR_5+10)
   449  000D46  6E06               	movwf	Lcd_Out@buffer+1,c
   450  000D48  0E01               	movlw	1
   451  000D4A  EC58  F007         	call	_Lcd_Out
   452                           
   453                           ;PicPicEsclavo.c: 61: RCREG=0;
   454  000D4E  0E00               	movlw	0
   455  000D50  6EAE               	movwf	4014,c	;volatile
   456  000D52                     l1432:
   457                           
   458                           ;PicPicEsclavo.c: 62: }
   459                           ;PicPicEsclavo.c: 63: sprintf(buffer,"%03d",RCREG);
   460  000D52  0E22               	movlw	low main@buffer
   461  000D54  6E0D               	movwf	sprintf@sp,c
   462  000D56  0E00               	movlw	high main@buffer
   463  000D58  6E0E               	movwf	sprintf@sp+1,c
   464  000D5A  0E1F               	movlw	low STR_4
   465  000D5C  6E0F               	movwf	sprintf@f,c
   466  000D5E  0E08               	movlw	high STR_4
   467  000D60  6E10               	movwf	sprintf@f+1,c
   468  000D62  CFAE F011          	movff	4014,?_sprintf+4	;volatile
   469  000D66  6A12               	clrf	?_sprintf+5,c
   470  000D68  EC14  F004         	call	_sprintf	;wreg free
   471                           
   472                           ;PicPicEsclavo.c: 64: Lcd_Out2(2,14,buffer);
   473  000D6C  0E0E               	movlw	14
   474  000D6E  6E04               	movwf	Lcd_Out2@x,c
   475  000D70  0E22               	movlw	low main@buffer
   476  000D72  6E05               	movwf	Lcd_Out2@buffer,c
   477  000D74  0E00               	movlw	high main@buffer
   478  000D76  6E06               	movwf	Lcd_Out2@buffer+1,c
   479  000D78  0E02               	movlw	2
   480  000D7A  ECBE  F007         	call	_Lcd_Out2
   481                           
   482                           ;PicPicEsclavo.c: 65: RCIF=0;
   483  000D7E  9A9E               	bcf	3998,5,c	;volatile
   484  000D80                     l1438:
   485                           
   486                           ;PicPicEsclavo.c: 66: }
   487                           ;PicPicEsclavo.c: 67: espera++;
   488  000D80  4A36               	infsnz	main@espera,f,c
   489  000D82  2A37               	incf	main@espera+1,f,c
   490  000D84                     l1440:
   491  000D84  5036               	movf	main@espera,w,c
   492  000D86  1037               	iorwf	main@espera+1,w,c
   493  000D88  A4D8               	btfss	status,2,c
   494  000D8A  D7B8               	goto	l119
   495                           
   496                           ;PicPicEsclavo.c: 68: }
   497                           ;PicPicEsclavo.c: 69: OFFRX();
   498  000D8C  EC63  F008         	call	_OFFRX	;wreg free
   499                           
   500                           ;PicPicEsclavo.c: 70: sprintf(buffer,"Valor %03d ",PORTB);
   501  000D90  0E22               	movlw	low main@buffer
   502  000D92  6E0D               	movwf	sprintf@sp,c
   503  000D94  0E00               	movlw	high main@buffer
   504  000D96  6E0E               	movwf	sprintf@sp+1,c
   505  000D98  0E0B               	movlw	low STR_5
   506  000D9A  6E0F               	movwf	sprintf@f,c
   507  000D9C  0E08               	movlw	high STR_5
   508  000D9E  6E10               	movwf	sprintf@f+1,c
   509  000DA0  CF81 F011          	movff	3969,?_sprintf+4	;volatile
   510  000DA4  6A12               	clrf	?_sprintf+5,c
   511  000DA6  EC14  F004         	call	_sprintf	;wreg free
   512                           
   513                           ;PicPicEsclavo.c: 71: Lcd_Out2(2,1,buffer);
   514  000DAA  0E01               	movlw	1
   515  000DAC  6E04               	movwf	Lcd_Out2@x,c
   516  000DAE  0E22               	movlw	low main@buffer
   517  000DB0  6E05               	movwf	Lcd_Out2@buffer,c
   518  000DB2  0E00               	movlw	high main@buffer
   519  000DB4  6E06               	movwf	Lcd_Out2@buffer+1,c
   520  000DB6  0E02               	movlw	2
   521  000DB8  ECBE  F007         	call	_Lcd_Out2
   522  000DBC  D796               	goto	l1412
   523  000DBE                     __end_of_main:
   524                           	opt stack 0
   525                           tblptru	equ	0xFF8
   526                           wreg	equ	0xFE8
   527                           status	equ	0xFD8
   528                           
   529 ;; *************** function _sprintf *****************
   530 ;; Defined at:
   531 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;  sp              2   12[COMRAM] PTR unsigned char 
   534 ;;		 -> main@buffer(20), 
   535 ;;  f               2   14[COMRAM] PTR const unsigned char 
   536 ;;		 -> STR_5(12), STR_4(5), 
   537 ;; Auto vars:     Size  Location     Type
   538 ;;  tmpval          4    0        struct .
   539 ;;  cp              3    0        PTR const unsigned char 
   540 ;;  width           2   28[COMRAM] int 
   541 ;;  val             2   25[COMRAM] unsigned int 
   542 ;;  ap              2   22[COMRAM] PTR void [1]
   543 ;;		 -> ?_sprintf(2), 
   544 ;;  len             2    0        unsigned int 
   545 ;;  c               1   30[COMRAM] char 
   546 ;;  flag            1   27[COMRAM] unsigned char 
   547 ;;  prec            1   24[COMRAM] char 
   548 ;; Return value:  Size  Location     Type
   549 ;;                  2   12[COMRAM] int 
   550 ;; Registers used:
   551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   557 ;;      Params:         6       0       0       0       0       0       0       0       0
   558 ;;      Locals:         9       0       0       0       0       0       0       0       0
   559 ;;      Temps:          4       0       0       0       0       0       0       0       0
   560 ;;      Totals:        19       0       0       0       0       0       0       0       0
   561 ;;Total ram usage:       19 bytes
   562 ;; Hardware stack levels used:    1
   563 ;; Hardware stack levels required when called:    1
   564 ;; This function calls:
   565 ;;		___lwdiv
   566 ;;		___lwmod
   567 ;;		___wmul
   568 ;;		_isdigit
   569 ;; This function is called by:
   570 ;;		_main
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           	psect	text1
   575  000828                     __ptext1:
   576                           	opt stack 0
   577  000828                     _sprintf:
   578                           	opt stack 29
   579                           
   580                           ;doprnt.c: 494: va_list ap;
   581                           ;doprnt.c: 499: signed char c;
   582                           ;doprnt.c: 501: int width;
   583                           ;doprnt.c: 506: signed char prec;
   584                           ;doprnt.c: 508: unsigned char flag;
   585                           ;doprnt.c: 523: union {
   586                           ;doprnt.c: 524: unsigned long vd;
   587                           ;doprnt.c: 525: double integ;
   588                           ;doprnt.c: 526: } tmpval;
   589                           ;doprnt.c: 528: unsigned int val;
   590                           ;doprnt.c: 529: unsigned len;
   591                           ;doprnt.c: 530: const char * cp;
   592                           ;doprnt.c: 533: *ap = __va_start();
   593                           
   594                           ;incstack = 0
   595  000828  0E11               	movlw	low (?_sprintf+4)
   596  00082A  6E17               	movwf	sprintf@ap,c
   597  00082C  0E00               	movlw	high (?_sprintf+4)
   598  00082E  6E18               	movwf	sprintf@ap+1,c
   599                           
   600                           ;doprnt.c: 536: while(c = *f++) {
   601  000830  D12F               	goto	l1398
   602  000832                     l1292:
   603                           
   604                           ;doprnt.c: 538: if(c != '%')
   605  000832  0E25               	movlw	37
   606  000834  181F               	xorwf	sprintf@c,w,c
   607  000836  B4D8               	btfsc	status,2,c
   608  000838  D009               	goto	l1298
   609                           
   610                           ;doprnt.c: 540: {
   611                           ;doprnt.c: 541: ((*sp++ = (c)));
   612  00083A  C00D  FFD9         	movff	sprintf@sp,fsr2l
   613  00083E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   614  000842  C01F  FFDF         	movff	sprintf@c,indf2
   615  000846  4A0D               	infsnz	sprintf@sp,f,c
   616  000848  2A0E               	incf	sprintf@sp+1,f,c
   617                           
   618                           ;doprnt.c: 542: continue;
   619  00084A  D122               	goto	l1398
   620  00084C                     l1298:
   621                           
   622                           ;doprnt.c: 543: }
   623                           ;doprnt.c: 546: width = 0;
   624  00084C  0E00               	movlw	0
   625  00084E  6E1E               	movwf	sprintf@width+1,c
   626  000850  0E00               	movlw	0
   627  000852  6E1D               	movwf	sprintf@width,c
   628                           
   629                           ;doprnt.c: 548: flag = 0;
   630  000854  0E00               	movlw	0
   631  000856  6E1C               	movwf	sprintf@flag,c
   632                           
   633                           ;doprnt.c: 551: switch(*f) {
   634                           
   635                           ;doprnt.c: 550: for(;;) {
   636  000858  D003               	goto	l1304
   637  00085A                     l1300:
   638                           
   639                           ;doprnt.c: 580: flag |= 0x04;
   640  00085A  841C               	bsf	sprintf@flag,2,c
   641                           
   642                           ;doprnt.c: 581: f++;
   643  00085C  4A0F               	infsnz	sprintf@f,f,c
   644  00085E  2A10               	incf	sprintf@f+1,f,c
   645  000860                     l1304:
   646  000860  C00F  FFF6         	movff	sprintf@f,tblptrl
   647  000864  C010  FFF7         	movff	sprintf@f+1,tblptrh
   648  000868                     	if	0	;tblptru may be non-zero
   649  000868                     	endif
   650  000868                     	if	0	;tblptru may be non-zero
   651  000868                     	endif
   652  000868  0008               	tblrd		*
   653  00086A  50F5               	movf	tablat,w,c
   654                           
   655                           ; Switch size 1, requested type "space"
   656                           ; Number of cases is 1, Range of values is 48 to 48
   657                           ; switch strategies available:
   658                           ; Name         Instructions Cycles
   659                           ; simple_byte            4     3 (average)
   660                           ;	Chosen strategy is simple_byte
   661  00086C  0A30               	xorlw	48	; case 48
   662  00086E  B4D8               	btfsc	status,2,c
   663  000870  D7F4               	goto	l1300
   664                           
   665                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   666                           
   667                           ;doprnt.c: 586: }
   668                           
   669                           ;doprnt.c: 585: break;
   670  000872  C00F  FFF6         	movff	sprintf@f,tblptrl
   671  000876  C010  FFF7         	movff	sprintf@f+1,tblptrh
   672  00087A                     	if	0	;tblptru may be non-zero
   673  00087A                     	endif
   674  00087A                     	if	0	;tblptru may be non-zero
   675  00087A                     	endif
   676  00087A  0008               	tblrd		*
   677  00087C  50F5               	movf	tablat,w,c
   678  00087E  EC4C  F008         	call	_isdigit
   679  000882  A0D8               	btfss	status,0,c
   680  000884  D032               	goto	l1320
   681                           
   682                           ;doprnt.c: 598: width = 0;
   683  000886  0E00               	movlw	0
   684  000888  6E1E               	movwf	sprintf@width+1,c
   685  00088A  0E00               	movlw	0
   686  00088C  6E1D               	movwf	sprintf@width,c
   687  00088E                     l1310:
   688                           
   689                           ;doprnt.c: 600: width *= 10;
   690  00088E  C01D  F001         	movff	sprintf@width,___wmul@multiplier
   691  000892  C01E  F002         	movff	sprintf@width+1,___wmul@multiplier+1
   692  000896  0E00               	movlw	0
   693  000898  6E04               	movwf	___wmul@multiplicand+1,c
   694  00089A  0E0A               	movlw	10
   695  00089C  6E03               	movwf	___wmul@multiplicand,c
   696  00089E  EC39  F008         	call	___wmul	;wreg free
   697  0008A2  C001  F01D         	movff	?___wmul,sprintf@width
   698  0008A6  C002  F01E         	movff	?___wmul+1,sprintf@width+1
   699                           
   700                           ;doprnt.c: 601: width += *f++ - '0';
   701  0008AA  0ED0               	movlw	208
   702  0008AC  6E13               	movwf	??_sprintf& (0+255),c
   703  0008AE  0EFF               	movlw	255
   704  0008B0  6E14               	movwf	(??_sprintf+1)& (0+255),c
   705  0008B2  C00F  FFF6         	movff	sprintf@f,tblptrl
   706  0008B6  C010  FFF7         	movff	sprintf@f+1,tblptrh
   707  0008BA                     	if	0	;tblptru may be non-zero
   708  0008BA                     	endif
   709  0008BA                     	if	0	;tblptru may be non-zero
   710  0008BA                     	endif
   711  0008BA  0008               	tblrd		*
   712  0008BC  50F5               	movf	tablat,w,c
   713  0008BE  6E15               	movwf	(??_sprintf+2)& (0+255),c
   714  0008C0  6A16               	clrf	(??_sprintf+3)& (0+255),c
   715  0008C2  5013               	movf	??_sprintf,w,c
   716  0008C4  2615               	addwf	??_sprintf+2,f,c
   717  0008C6  5014               	movf	??_sprintf+1,w,c
   718  0008C8  2216               	addwfc	??_sprintf+3,f,c
   719  0008CA  5015               	movf	??_sprintf+2,w,c
   720  0008CC  261D               	addwf	sprintf@width,f,c
   721  0008CE  5016               	movf	??_sprintf+3,w,c
   722  0008D0  221E               	addwfc	sprintf@width+1,f,c
   723  0008D2  4A0F               	infsnz	sprintf@f,f,c
   724  0008D4  2A10               	incf	sprintf@f+1,f,c
   725                           
   726                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   727  0008D6  C00F  FFF6         	movff	sprintf@f,tblptrl
   728  0008DA  C010  FFF7         	movff	sprintf@f+1,tblptrh
   729  0008DE                     	if	0	;tblptru may be non-zero
   730  0008DE                     	endif
   731  0008DE                     	if	0	;tblptru may be non-zero
   732  0008DE                     	endif
   733  0008DE  0008               	tblrd		*
   734  0008E0  50F5               	movf	tablat,w,c
   735  0008E2  EC4C  F008         	call	_isdigit
   736  0008E6  B0D8               	btfsc	status,0,c
   737  0008E8  D7D2               	goto	l1310
   738  0008EA                     l1320:
   739  0008EA  C00F  FFF6         	movff	sprintf@f,tblptrl
   740  0008EE  C010  FFF7         	movff	sprintf@f+1,tblptrh
   741  0008F2  4A0F               	infsnz	sprintf@f,f,c
   742  0008F4  2A10               	incf	sprintf@f+1,f,c
   743  0008F6                     	if	0	;tblptru may be non-zero
   744  0008F6                     	endif
   745  0008F6                     	if	0	;tblptru may be non-zero
   746  0008F6                     	endif
   747  0008F6  0008               	tblrd		*
   748  0008F8  CFF5 F01F          	movff	tablat,sprintf@c
   749  0008FC  501F               	movf	sprintf@c,w,c
   750                           
   751                           ; Switch size 1, requested type "space"
   752                           ; Number of cases is 3, Range of values is 0 to 105
   753                           ; switch strategies available:
   754                           ; Name         Instructions Cycles
   755                           ; simple_byte           10     6 (average)
   756                           ;	Chosen strategy is simple_byte
   757  0008FE  0A00               	xorlw	0	; case 0
   758  000900  B4D8               	btfsc	status,2,c
   759  000902  D0D2               	goto	l1400
   760  000904  0A64               	xorlw	100	; case 100
   761  000906  B4D8               	btfsc	status,2,c
   762  000908  D003               	goto	l1322
   763  00090A  0A0D               	xorlw	13	; case 105
   764  00090C  A4D8               	btfss	status,2,c
   765  00090E  D0C0               	goto	l1398
   766  000910                     l1322:
   767                           
   768                           ;doprnt.c: 1253: {
   769                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   770  000910  C017  FFD9         	movff	sprintf@ap,fsr2l
   771  000914  C018  FFDA         	movff	sprintf@ap+1,fsr2h
   772  000918  CFDE F01A          	movff	postinc2,sprintf@val
   773  00091C  CFDD F01B          	movff	postdec2,sprintf@val+1
   774  000920  0E02               	movlw	2
   775  000922  2617               	addwf	sprintf@ap,f,c
   776  000924  0E00               	movlw	0
   777  000926  2218               	addwfc	sprintf@ap+1,f,c
   778                           
   779                           ;doprnt.c: 1261: if((int)val < 0) {
   780  000928  AE1B               	btfss	sprintf@val+1,7,c
   781  00092A  D006               	goto	l1332
   782                           
   783                           ;doprnt.c: 1262: flag |= 0x03;
   784  00092C  0E03               	movlw	3
   785  00092E  121C               	iorwf	sprintf@flag,f,c
   786                           
   787                           ;doprnt.c: 1263: val = -val;
   788  000930  6C1A               	negf	sprintf@val,c
   789  000932  1E1B               	comf	sprintf@val+1,f,c
   790  000934  B0D8               	btfsc	status,0,c
   791  000936  2A1B               	incf	sprintf@val+1,f,c
   792  000938                     l1332:
   793                           
   794                           ;doprnt.c: 1264: }
   795                           ;doprnt.c: 1266: }
   796                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   797  000938  0E01               	movlw	1
   798  00093A  6E1F               	movwf	sprintf@c,c
   799  00093C                     l1334:
   800  00093C  0E05               	movlw	5
   801  00093E  181F               	xorwf	sprintf@c,w,c
   802  000940  B4D8               	btfsc	status,2,c
   803  000942  D012               	goto	l1346
   804                           
   805                           ;doprnt.c: 1306: if(val < dpowers[c])
   806  000944  501F               	movf	sprintf@c,w,c
   807  000946  0D02               	mullw	2
   808  000948  0E01               	movlw	low _dpowers
   809  00094A  24F3               	addwf	prodl,w,c
   810  00094C  6EF6               	movwf	tblptrl,c
   811  00094E  0E08               	movlw	high _dpowers
   812  000950  20F4               	addwfc	prodh,w,c
   813  000952  6EF7               	movwf	tblptrh,c
   814  000954                     	if	0	;There are less than 3 active tblptr bytes
   815  000954                     	endif
   816  000954  0009               	tblrd		*+
   817  000956  50F5               	movf	tablat,w,c
   818  000958  5C1A               	subwf	sprintf@val,w,c
   819  00095A  0009               	tblrd		*+
   820  00095C  50F5               	movf	tablat,w,c
   821  00095E  581B               	subwfb	sprintf@val+1,w,c
   822  000960  A0D8               	btfss	status,0,c
   823  000962  D002               	goto	l1346
   824                           
   825                           ;doprnt.c: 1307: break;
   826  000964  2A1F               	incf	sprintf@c,f,c
   827  000966  D7EA               	goto	l1334
   828  000968                     l1346:
   829                           
   830                           ;doprnt.c: 1345: if(width && flag & 0x03)
   831  000968  501D               	movf	sprintf@width,w,c
   832  00096A  101E               	iorwf	sprintf@width+1,w,c
   833  00096C  B4D8               	btfsc	status,2,c
   834  00096E  D009               	goto	l1352
   835  000970  C01C  F013         	movff	sprintf@flag,??_sprintf
   836  000974  0E03               	movlw	3
   837  000976  1613               	andwf	??_sprintf,f,c
   838  000978  B4D8               	btfsc	status,2,c
   839  00097A  D003               	goto	l1352
   840                           
   841                           ;doprnt.c: 1346: width--;
   842  00097C  061D               	decf	sprintf@width,f,c
   843  00097E  A0D8               	btfss	status,0,c
   844  000980  061E               	decf	sprintf@width+1,f,c
   845  000982                     l1352:
   846                           
   847                           ;doprnt.c: 1381: if(width > c)
   848  000982  0E80               	movlw	128
   849  000984  BE1F               	btfsc	sprintf@c,7,c
   850  000986  0E7F               	movlw	127
   851  000988  6E13               	movwf	??_sprintf& (0+255),c
   852  00098A  501D               	movf	sprintf@width,w,c
   853  00098C  5C1F               	subwf	sprintf@c,w,c
   854  00098E  501E               	movf	sprintf@width+1,w,c
   855  000990  0A80               	xorlw	128
   856  000992  5813               	subwfb	??_sprintf& (0+255),w,c
   857  000994  B0D8               	btfsc	status,0,c
   858  000996  D007               	goto	l1356
   859                           
   860                           ;doprnt.c: 1382: width -= c;
   861  000998  501F               	movf	sprintf@c,w,c
   862  00099A  5E1D               	subwf	sprintf@width,f,c
   863  00099C  0E00               	movlw	0
   864  00099E  BE1F               	btfsc	sprintf@c,7,c
   865  0009A0  0EFF               	movlw	255
   866  0009A2  5A1E               	subwfb	sprintf@width+1,f,c
   867  0009A4  D004               	goto	l1358
   868  0009A6                     l1356:
   869                           
   870                           ;doprnt.c: 1383: else
   871                           ;doprnt.c: 1384: width = 0;
   872  0009A6  0E00               	movlw	0
   873  0009A8  6E1E               	movwf	sprintf@width+1,c
   874  0009AA  0E00               	movlw	0
   875  0009AC  6E1D               	movwf	sprintf@width,c
   876  0009AE                     l1358:
   877                           
   878                           ;doprnt.c: 1387: if(flag & 0x04) {
   879  0009AE  A41C               	btfss	sprintf@flag,2,c
   880  0009B0  D01E               	goto	l1374
   881                           
   882                           ;doprnt.c: 1392: if(flag & 0x03)
   883  0009B2  C01C  F013         	movff	sprintf@flag,??_sprintf
   884  0009B6  0E03               	movlw	3
   885  0009B8  1613               	andwf	??_sprintf,f,c
   886  0009BA  B4D8               	btfsc	status,2,c
   887  0009BC  D008               	goto	l1366
   888                           
   889                           ;doprnt.c: 1393: ((*sp++ = ('-')));
   890  0009BE  C00D  FFD9         	movff	sprintf@sp,fsr2l
   891  0009C2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   892  0009C6  0E2D               	movlw	45
   893  0009C8  6EDF               	movwf	indf2,c
   894  0009CA  4A0D               	infsnz	sprintf@sp,f,c
   895  0009CC  2A0E               	incf	sprintf@sp+1,f,c
   896  0009CE                     l1366:
   897                           
   898                           ;doprnt.c: 1415: if(width)
   899  0009CE  501D               	movf	sprintf@width,w,c
   900  0009D0  101E               	iorwf	sprintf@width+1,w,c
   901  0009D2  B4D8               	btfsc	status,2,c
   902  0009D4  D02D               	goto	l1388
   903                           
   904                           ;doprnt.c: 1417: ((*sp++ = ('0')));
   905                           
   906                           ;doprnt.c: 1416: do
   907  0009D6  C00D  FFD9         	movff	sprintf@sp,fsr2l
   908  0009DA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   909  0009DE  0E30               	movlw	48
   910  0009E0  6EDF               	movwf	indf2,c
   911  0009E2  4A0D               	infsnz	sprintf@sp,f,c
   912  0009E4  2A0E               	incf	sprintf@sp+1,f,c
   913                           
   914                           ;doprnt.c: 1418: while(--width);
   915  0009E6  061D               	decf	sprintf@width,f,c
   916  0009E8  A0D8               	btfss	status,0,c
   917  0009EA  061E               	decf	sprintf@width+1,f,c
   918  0009EC  D7F0               	goto	l1366
   919  0009EE                     l1374:
   920                           
   921                           ;doprnt.c: 1422: {
   922                           ;doprnt.c: 1424: if(width
   923                           ;doprnt.c: 1428: )
   924  0009EE  501D               	movf	sprintf@width,w,c
   925  0009F0  101E               	iorwf	sprintf@width+1,w,c
   926  0009F2  B4D8               	btfsc	status,2,c
   927  0009F4  D00F               	goto	l1382
   928  0009F6                     l1376:
   929                           
   930                           ;doprnt.c: 1430: ((*sp++ = (' ')));
   931  0009F6  C00D  FFD9         	movff	sprintf@sp,fsr2l
   932  0009FA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   933  0009FE  0E20               	movlw	32
   934  000A00  6EDF               	movwf	indf2,c
   935  000A02  4A0D               	infsnz	sprintf@sp,f,c
   936  000A04  2A0E               	incf	sprintf@sp+1,f,c
   937                           
   938                           ;doprnt.c: 1431: while(--width);
   939  000A06  061D               	decf	sprintf@width,f,c
   940  000A08  A0D8               	btfss	status,0,c
   941  000A0A  061E               	decf	sprintf@width+1,f,c
   942  000A0C  501D               	movf	sprintf@width,w,c
   943  000A0E  101E               	iorwf	sprintf@width+1,w,c
   944  000A10  A4D8               	btfss	status,2,c
   945  000A12  D7F1               	goto	l1376
   946  000A14                     l1382:
   947                           
   948                           ;doprnt.c: 1438: if(flag & 0x03)
   949  000A14  C01C  F013         	movff	sprintf@flag,??_sprintf
   950  000A18  0E03               	movlw	3
   951  000A1A  1613               	andwf	??_sprintf,f,c
   952  000A1C  B4D8               	btfsc	status,2,c
   953  000A1E  D008               	goto	l1388
   954                           
   955                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   956  000A20  C00D  FFD9         	movff	sprintf@sp,fsr2l
   957  000A24  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   958  000A28  0E2D               	movlw	45
   959  000A2A  6EDF               	movwf	indf2,c
   960  000A2C  4A0D               	infsnz	sprintf@sp,f,c
   961  000A2E  2A0E               	incf	sprintf@sp+1,f,c
   962  000A30                     l1388:
   963                           
   964                           ;doprnt.c: 1469: }
   965                           ;doprnt.c: 1472: prec = c;
   966  000A30  C01F  F019         	movff	sprintf@c,sprintf@prec
   967                           
   968                           ;doprnt.c: 1474: while(prec--) {
   969  000A34  D029               	goto	l1396
   970  000A36                     l1390:
   971                           
   972                           ;doprnt.c: 1478: {
   973                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   974  000A36  5019               	movf	sprintf@prec,w,c
   975  000A38  0D02               	mullw	2
   976  000A3A  0E01               	movlw	low _dpowers
   977  000A3C  24F3               	addwf	prodl,w,c
   978  000A3E  6EF6               	movwf	tblptrl,c
   979  000A40  0E08               	movlw	high _dpowers
   980  000A42  20F4               	addwfc	prodh,w,c
   981  000A44  6EF7               	movwf	tblptrh,c
   982  000A46                     	if	0	;There are less than 3 active tblptr bytes
   983  000A46                     	endif
   984  000A46  0009               	tblrd		*+
   985  000A48  CFF5 F003          	movff	tablat,___lwdiv@divisor
   986  000A4C  000A               	tblrd		*-
   987  000A4E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   988  000A52  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
   989  000A56  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
   990  000A5A  ECEF  F007         	call	___lwdiv	;wreg free
   991  000A5E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   992  000A62  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   993  000A66  0E00               	movlw	0
   994  000A68  6E0B               	movwf	___lwmod@divisor+1,c
   995  000A6A  0E0A               	movlw	10
   996  000A6C  6E0A               	movwf	___lwmod@divisor,c
   997  000A6E  EC18  F008         	call	___lwmod	;wreg free
   998  000A72  5008               	movf	?___lwmod,w,c
   999  000A74  0F30               	addlw	48
  1000  000A76  6E1F               	movwf	sprintf@c,c
  1001                           
  1002                           ;doprnt.c: 1523: }
  1003                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1004  000A78  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1005  000A7C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1006  000A80  C01F  FFDF         	movff	sprintf@c,indf2
  1007  000A84  4A0D               	infsnz	sprintf@sp,f,c
  1008  000A86  2A0E               	incf	sprintf@sp+1,f,c
  1009  000A88                     l1396:
  1010  000A88  0619               	decf	sprintf@prec,f,c
  1011  000A8A  2819               	incf	sprintf@prec,w,c
  1012  000A8C  A4D8               	btfss	status,2,c
  1013  000A8E  D7D3               	goto	l1390
  1014  000A90                     l1398:
  1015  000A90  C00F  FFF6         	movff	sprintf@f,tblptrl
  1016  000A94  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1017  000A98  4A0F               	infsnz	sprintf@f,f,c
  1018  000A9A  2A10               	incf	sprintf@f+1,f,c
  1019  000A9C                     	if	0	;tblptru may be non-zero
  1020  000A9C                     	endif
  1021  000A9C                     	if	0	;tblptru may be non-zero
  1022  000A9C                     	endif
  1023  000A9C  0008               	tblrd		*
  1024  000A9E  CFF5 F01F          	movff	tablat,sprintf@c
  1025  000AA2  501F               	movf	sprintf@c,w,c
  1026  000AA4  A4D8               	btfss	status,2,c
  1027  000AA6  D6C5               	goto	l1292
  1028  000AA8                     l1400:
  1029                           
  1030                           ;doprnt.c: 1538: *sp = 0;
  1031  000AA8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1032  000AAC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1033  000AB0  0E00               	movlw	0
  1034  000AB2  6EDF               	movwf	indf2,c
  1035  000AB4  0012               	return	
  1036  000AB6                     __end_of_sprintf:
  1037                           	opt stack 0
  1038                           tblptru	equ	0xFF8
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           tablat	equ	0xFF5
  1042                           prodh	equ	0xFF4
  1043                           prodl	equ	0xFF3
  1044                           wreg	equ	0xFE8
  1045                           indf2	equ	0xFDF
  1046                           postinc2	equ	0xFDE
  1047                           postdec2	equ	0xFDD
  1048                           fsr2h	equ	0xFDA
  1049                           fsr2l	equ	0xFD9
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _isdigit *****************
  1053 ;; Defined at:
  1054 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  c               1    wreg     unsigned char 
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  c               1    2[COMRAM] unsigned char 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;		None               void
  1061 ;; Registers used:
  1062 ;;		wreg, status,2, status,0
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1068 ;;      Params:         0       0       0       0       0       0       0       0       0
  1069 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1070 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1071 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1072 ;;Total ram usage:        3 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; This function calls:
  1075 ;;		Nothing
  1076 ;; This function is called by:
  1077 ;;		_sprintf
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           	psect	text2
  1082  001098                     __ptext2:
  1083                           	opt stack 0
  1084  001098                     _isdigit:
  1085                           	opt stack 29
  1086                           
  1087                           ;incstack = 0
  1088                           ;isdigit@c stored from wreg
  1089  001098  6E03               	movwf	isdigit@c,c
  1090  00109A  0E00               	movlw	0
  1091  00109C  6E02               	movwf	_isdigit$417,c
  1092  00109E  0E3A               	movlw	58
  1093  0010A0  6003               	cpfslt	isdigit@c,c
  1094  0010A2  D005               	goto	l1198
  1095  0010A4  0E2F               	movlw	47
  1096  0010A6  6403               	cpfsgt	isdigit@c,c
  1097  0010A8  D002               	goto	l1198
  1098  0010AA  0E01               	movlw	1
  1099  0010AC  6E02               	movwf	_isdigit$417,c
  1100  0010AE                     l1198:
  1101  0010AE  C002  F001         	movff	_isdigit$417,??_isdigit
  1102  0010B2  3001               	rrcf	??_isdigit,w,c
  1103  0010B4  0012               	return	
  1104  0010B6                     __end_of_isdigit:
  1105                           	opt stack 0
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           prodh	equ	0xFF4
  1111                           prodl	equ	0xFF3
  1112                           wreg	equ	0xFE8
  1113                           indf2	equ	0xFDF
  1114                           postinc2	equ	0xFDE
  1115                           postdec2	equ	0xFDD
  1116                           fsr2h	equ	0xFDA
  1117                           fsr2l	equ	0xFD9
  1118                           status	equ	0xFD8
  1119                           
  1120 ;; *************** function ___wmul *****************
  1121 ;; Defined at:
  1122 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  multiplier      2    0[COMRAM] unsigned int 
  1125 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  product         2    4[COMRAM] unsigned int 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  2    0[COMRAM] unsigned int 
  1130 ;; Registers used:
  1131 ;;		wreg, status,2, status,0, prodl, prodh
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1137 ;;      Params:         4       0       0       0       0       0       0       0       0
  1138 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1140 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1141 ;;Total ram usage:        6 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_sprintf
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text3
  1151  001072                     __ptext3:
  1152                           	opt stack 0
  1153  001072                     ___wmul:
  1154                           	opt stack 29
  1155                           
  1156                           ;incstack = 0
  1157  001072  5001               	movf	___wmul@multiplier,w,c
  1158  001074  0203               	mulwf	___wmul@multiplicand,c
  1159  001076  CFF3 F005          	movff	prodl,___wmul@product
  1160  00107A  CFF4 F006          	movff	prodh,___wmul@product+1
  1161  00107E  5001               	movf	___wmul@multiplier,w,c
  1162  001080  0204               	mulwf	___wmul@multiplicand+1,c
  1163  001082  50F3               	movf	prodl,w,c
  1164  001084  2606               	addwf	___wmul@product+1,f,c
  1165  001086  5002               	movf	___wmul@multiplier+1,w,c
  1166  001088  0203               	mulwf	___wmul@multiplicand,c
  1167  00108A  50F3               	movf	prodl,w,c
  1168  00108C  2606               	addwf	___wmul@product+1,f,c
  1169  00108E  C005  F001         	movff	___wmul@product,?___wmul
  1170  001092  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1171  001096  0012               	return	
  1172  001098                     __end_of___wmul:
  1173                           	opt stack 0
  1174                           tblptru	equ	0xFF8
  1175                           tblptrh	equ	0xFF7
  1176                           tblptrl	equ	0xFF6
  1177                           tablat	equ	0xFF5
  1178                           prodh	equ	0xFF4
  1179                           prodl	equ	0xFF3
  1180                           wreg	equ	0xFE8
  1181                           indf2	equ	0xFDF
  1182                           postinc2	equ	0xFDE
  1183                           postdec2	equ	0xFDD
  1184                           fsr2h	equ	0xFDA
  1185                           fsr2l	equ	0xFD9
  1186                           status	equ	0xFD8
  1187                           
  1188 ;; *************** function ___lwmod *****************
  1189 ;; Defined at:
  1190 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  dividend        2    7[COMRAM] unsigned int 
  1193 ;;  divisor         2    9[COMRAM] unsigned int 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  counter         1   11[COMRAM] unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  2    7[COMRAM] unsigned int 
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1205 ;;      Params:         4       0       0       0       0       0       0       0       0
  1206 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1208 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1209 ;;Total ram usage:        5 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; This function calls:
  1212 ;;		Nothing
  1213 ;; This function is called by:
  1214 ;;		_sprintf
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text4
  1219  001030                     __ptext4:
  1220                           	opt stack 0
  1221  001030                     ___lwmod:
  1222                           	opt stack 29
  1223                           
  1224                           ;incstack = 0
  1225  001030  500A               	movf	___lwmod@divisor,w,c
  1226  001032  100B               	iorwf	___lwmod@divisor+1,w,c
  1227  001034  B4D8               	btfsc	status,2,c
  1228  001036  D018               	goto	l597
  1229  001038  0E01               	movlw	1
  1230  00103A  6E0C               	movwf	___lwmod@counter,c
  1231  00103C  D004               	goto	l1236
  1232  00103E                     l1234:
  1233  00103E  90D8               	bcf	status,0,c
  1234  001040  360A               	rlcf	___lwmod@divisor,f,c
  1235  001042  360B               	rlcf	___lwmod@divisor+1,f,c
  1236  001044  2A0C               	incf	___lwmod@counter,f,c
  1237  001046                     l1236:
  1238  001046  AE0B               	btfss	___lwmod@divisor+1,7,c
  1239  001048  D7FA               	goto	l1234
  1240  00104A                     l1238:
  1241  00104A  500A               	movf	___lwmod@divisor,w,c
  1242  00104C  5C08               	subwf	___lwmod@dividend,w,c
  1243  00104E  500B               	movf	___lwmod@divisor+1,w,c
  1244  001050  5809               	subwfb	___lwmod@dividend+1,w,c
  1245  001052  A0D8               	btfss	status,0,c
  1246  001054  D004               	goto	l1242
  1247  001056  500A               	movf	___lwmod@divisor,w,c
  1248  001058  5E08               	subwf	___lwmod@dividend,f,c
  1249  00105A  500B               	movf	___lwmod@divisor+1,w,c
  1250  00105C  5A09               	subwfb	___lwmod@dividend+1,f,c
  1251  00105E                     l1242:
  1252  00105E  90D8               	bcf	status,0,c
  1253  001060  320B               	rrcf	___lwmod@divisor+1,f,c
  1254  001062  320A               	rrcf	___lwmod@divisor,f,c
  1255  001064  2E0C               	decfsz	___lwmod@counter,f,c
  1256  001066  D7F1               	goto	l1238
  1257  001068                     l597:
  1258  001068  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1259  00106C  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1260  001070  0012               	return		;funcret
  1261  001072                     __end_of___lwmod:
  1262                           	opt stack 0
  1263                           tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           prodh	equ	0xFF4
  1268                           prodl	equ	0xFF3
  1269                           wreg	equ	0xFE8
  1270                           indf2	equ	0xFDF
  1271                           postinc2	equ	0xFDE
  1272                           postdec2	equ	0xFDD
  1273                           fsr2h	equ	0xFDA
  1274                           fsr2l	equ	0xFD9
  1275                           status	equ	0xFD8
  1276                           
  1277 ;; *************** function ___lwdiv *****************
  1278 ;; Defined at:
  1279 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  dividend        2    0[COMRAM] unsigned int 
  1282 ;;  divisor         2    2[COMRAM] unsigned int 
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  quotient        2    4[COMRAM] unsigned int 
  1285 ;;  counter         1    6[COMRAM] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  2    0[COMRAM] unsigned int 
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1295 ;;      Params:         4       0       0       0       0       0       0       0       0
  1296 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1298 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1299 ;;Total ram usage:        7 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_sprintf
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text5
  1309  000FDE                     __ptext5:
  1310                           	opt stack 0
  1311  000FDE                     ___lwdiv:
  1312                           	opt stack 29
  1313                           
  1314                           ;incstack = 0
  1315  000FDE  0E00               	movlw	0
  1316  000FE0  6E06               	movwf	___lwdiv@quotient+1,c
  1317  000FE2  0E00               	movlw	0
  1318  000FE4  6E05               	movwf	___lwdiv@quotient,c
  1319  000FE6  5003               	movf	___lwdiv@divisor,w,c
  1320  000FE8  1004               	iorwf	___lwdiv@divisor+1,w,c
  1321  000FEA  B4D8               	btfsc	status,2,c
  1322  000FEC  D01C               	goto	l587
  1323  000FEE  0E01               	movlw	1
  1324  000FF0  6E07               	movwf	___lwdiv@counter,c
  1325  000FF2  D004               	goto	l1216
  1326  000FF4                     l1214:
  1327  000FF4  90D8               	bcf	status,0,c
  1328  000FF6  3603               	rlcf	___lwdiv@divisor,f,c
  1329  000FF8  3604               	rlcf	___lwdiv@divisor+1,f,c
  1330  000FFA  2A07               	incf	___lwdiv@counter,f,c
  1331  000FFC                     l1216:
  1332  000FFC  AE04               	btfss	___lwdiv@divisor+1,7,c
  1333  000FFE  D7FA               	goto	l1214
  1334  001000                     l1218:
  1335  001000  90D8               	bcf	status,0,c
  1336  001002  3605               	rlcf	___lwdiv@quotient,f,c
  1337  001004  3606               	rlcf	___lwdiv@quotient+1,f,c
  1338  001006  5003               	movf	___lwdiv@divisor,w,c
  1339  001008  5C01               	subwf	___lwdiv@dividend,w,c
  1340  00100A  5004               	movf	___lwdiv@divisor+1,w,c
  1341  00100C  5802               	subwfb	___lwdiv@dividend+1,w,c
  1342  00100E  A0D8               	btfss	status,0,c
  1343  001010  D005               	goto	l1226
  1344  001012  5003               	movf	___lwdiv@divisor,w,c
  1345  001014  5E01               	subwf	___lwdiv@dividend,f,c
  1346  001016  5004               	movf	___lwdiv@divisor+1,w,c
  1347  001018  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1348  00101A  8005               	bsf	___lwdiv@quotient,0,c
  1349  00101C                     l1226:
  1350  00101C  90D8               	bcf	status,0,c
  1351  00101E  3204               	rrcf	___lwdiv@divisor+1,f,c
  1352  001020  3203               	rrcf	___lwdiv@divisor,f,c
  1353  001022  2E07               	decfsz	___lwdiv@counter,f,c
  1354  001024  D7ED               	goto	l1218
  1355  001026                     l587:
  1356  001026  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1357  00102A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1358  00102E  0012               	return		;funcret
  1359  001030                     __end_of___lwdiv:
  1360                           	opt stack 0
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           prodh	equ	0xFF4
  1366                           prodl	equ	0xFF3
  1367                           wreg	equ	0xFE8
  1368                           indf2	equ	0xFDF
  1369                           postinc2	equ	0xFDE
  1370                           postdec2	equ	0xFDD
  1371                           fsr2h	equ	0xFDA
  1372                           fsr2l	equ	0xFD9
  1373                           status	equ	0xFD8
  1374                           
  1375 ;; *************** function _ONRX *****************
  1376 ;; Defined at:
  1377 ;;		line 31 in file "PicPicEsclavo.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;		None
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;		None
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  1    wreg      void 
  1384 ;; Registers used:
  1385 ;;		wreg, status,2
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1391 ;;      Params:         0       0       0       0       0       0       0       0       0
  1392 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1393 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1394 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1395 ;;Total ram usage:        0 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text6
  1405  0010C0                     __ptext6:
  1406                           	opt stack 0
  1407  0010C0                     _ONRX:
  1408                           	opt stack 30
  1409                           
  1410                           ;PicPicEsclavo.c: 32: RCSTA=0b10010000;
  1411                           
  1412                           ;incstack = 0
  1413  0010C0  0E90               	movlw	144
  1414  0010C2  6EAB               	movwf	4011,c	;volatile
  1415  0010C4  0012               	return		;funcret
  1416  0010C6                     __end_of_ONRX:
  1417                           	opt stack 0
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           prodh	equ	0xFF4
  1423                           prodl	equ	0xFF3
  1424                           wreg	equ	0xFE8
  1425                           indf2	equ	0xFDF
  1426                           postinc2	equ	0xFDE
  1427                           postdec2	equ	0xFDD
  1428                           fsr2h	equ	0xFDA
  1429                           fsr2l	equ	0xFD9
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function _OFFRX *****************
  1433 ;; Defined at:
  1434 ;;		line 34 in file "PicPicEsclavo.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;		None
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  1    wreg      void 
  1441 ;; Registers used:
  1442 ;;		wreg, status,2
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1448 ;;      Params:         0       0       0       0       0       0       0       0       0
  1449 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1451 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1452 ;;Total ram usage:        0 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; This function calls:
  1455 ;;		Nothing
  1456 ;; This function is called by:
  1457 ;;		_main
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           	psect	text7
  1462  0010C6                     __ptext7:
  1463                           	opt stack 0
  1464  0010C6                     _OFFRX:
  1465                           	opt stack 30
  1466                           
  1467                           ;PicPicEsclavo.c: 35: RCSTA=0b10000000;
  1468                           
  1469                           ;incstack = 0
  1470  0010C6  0E80               	movlw	128
  1471  0010C8  6EAB               	movwf	4011,c	;volatile
  1472  0010CA  0012               	return		;funcret
  1473  0010CC                     __end_of_OFFRX:
  1474                           	opt stack 0
  1475                           tblptru	equ	0xFF8
  1476                           tblptrh	equ	0xFF7
  1477                           tblptrl	equ	0xFF6
  1478                           tablat	equ	0xFF5
  1479                           prodh	equ	0xFF4
  1480                           prodl	equ	0xFF3
  1481                           wreg	equ	0xFE8
  1482                           indf2	equ	0xFDF
  1483                           postinc2	equ	0xFDE
  1484                           postdec2	equ	0xFDD
  1485                           fsr2h	equ	0xFDA
  1486                           fsr2l	equ	0xFD9
  1487                           status	equ	0xFD8
  1488                           
  1489 ;; *************** function _Lcd_Out2 *****************
  1490 ;; Defined at:
  1491 ;;		line 116 in file "flex_lcd.h"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;  y               1    wreg     unsigned char 
  1494 ;;  x               1    3[COMRAM] unsigned char 
  1495 ;;  buffer          2    4[COMRAM] PTR unsigned char 
  1496 ;;		 -> main@buffer(20), 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  y               1    6[COMRAM] unsigned char 
  1499 ;;  data            1    7[COMRAM] unsigned char 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1509 ;;      Params:         3       0       0       0       0       0       0       0       0
  1510 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1512 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1513 ;;Total ram usage:        5 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    1
  1516 ;; This function calls:
  1517 ;;		_Lcd_Chr_CP
  1518 ;;		_Lcd_Cmd
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text8
  1525  000F7C                     __ptext8:
  1526                           	opt stack 0
  1527  000F7C                     _Lcd_Out2:
  1528                           	opt stack 29
  1529                           
  1530                           ;incstack = 0
  1531                           ;Lcd_Out2@y stored from wreg
  1532  000F7C  6E07               	movwf	Lcd_Out2@y,c
  1533                           
  1534                           ;flex_lcd.h: 118: unsigned char data;
  1535                           ;flex_lcd.h: 119: switch (y)
  1536  000F7E  D00D               	goto	l1280
  1537  000F80                     l1270:
  1538  000F80  5004               	movf	Lcd_Out2@x,w,c
  1539  000F82  0F80               	addlw	128
  1540  000F84  D008               	goto	L3
  1541  000F86                     l1272:
  1542  000F86  5004               	movf	Lcd_Out2@x,w,c
  1543  000F88  0FC0               	addlw	192
  1544  000F8A  D005               	goto	L3
  1545  000F8C                     l1274:
  1546  000F8C  5004               	movf	Lcd_Out2@x,w,c
  1547  000F8E  0F94               	addlw	148
  1548  000F90  D002               	goto	L3
  1549  000F92                     l1276:
  1550  000F92  5004               	movf	Lcd_Out2@x,w,c
  1551  000F94  0FD4               	addlw	212
  1552  000F96                     L3:
  1553  000F96  6E08               	movwf	Lcd_Out2@data,c
  1554                           
  1555                           ;flex_lcd.h: 126: }
  1556                           
  1557                           ;flex_lcd.h: 125: default: break;
  1558  000F98  D00D               	goto	l1282
  1559  000F9A                     l1280:
  1560  000F9A  5007               	movf	Lcd_Out2@y,w,c
  1561                           
  1562                           ; Switch size 1, requested type "space"
  1563                           ; Number of cases is 4, Range of values is 1 to 4
  1564                           ; switch strategies available:
  1565                           ; Name         Instructions Cycles
  1566                           ; simple_byte           13     7 (average)
  1567                           ;	Chosen strategy is simple_byte
  1568  000F9C  0A01               	xorlw	1	; case 1
  1569  000F9E  B4D8               	btfsc	status,2,c
  1570  000FA0  D7EF               	goto	l1270
  1571  000FA2  0A03               	xorlw	3	; case 2
  1572  000FA4  B4D8               	btfsc	status,2,c
  1573  000FA6  D7EF               	goto	l1272
  1574  000FA8  0A01               	xorlw	1	; case 3
  1575  000FAA  B4D8               	btfsc	status,2,c
  1576  000FAC  D7EF               	goto	l1274
  1577  000FAE  0A07               	xorlw	7	; case 4
  1578  000FB0  B4D8               	btfsc	status,2,c
  1579  000FB2  D7EF               	goto	l1276
  1580  000FB4                     l1282:
  1581                           
  1582                           ;flex_lcd.h: 127: Lcd_Cmd(data);
  1583  000FB4  5008               	movf	Lcd_Out2@data,w,c
  1584  000FB6  ECDF  F006         	call	_Lcd_Cmd
  1585                           
  1586                           ;flex_lcd.h: 128: while(*buffer)
  1587  000FBA  D009               	goto	l1288
  1588  000FBC                     l1284:
  1589                           
  1590                           ;flex_lcd.h: 129: {
  1591                           ;flex_lcd.h: 130: Lcd_Chr_CP(*buffer);
  1592  000FBC  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  1593  000FC0  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  1594  000FC4  50DF               	movf	indf2,w,c
  1595  000FC6  ECE8  F005         	call	_Lcd_Chr_CP
  1596                           
  1597                           ;flex_lcd.h: 131: buffer++;
  1598  000FCA  4A05               	infsnz	Lcd_Out2@buffer,f,c
  1599  000FCC  2A06               	incf	Lcd_Out2@buffer+1,f,c
  1600  000FCE                     l1288:
  1601  000FCE  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  1602  000FD2  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  1603  000FD6  50DF               	movf	indf2,w,c
  1604  000FD8  B4D8               	btfsc	status,2,c
  1605  000FDA  0012               	return	
  1606  000FDC  D7EF               	goto	l1284
  1607  000FDE                     __end_of_Lcd_Out2:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           prodh	equ	0xFF4
  1614                           prodl	equ	0xFF3
  1615                           wreg	equ	0xFE8
  1616                           indf2	equ	0xFDF
  1617                           postinc2	equ	0xFDE
  1618                           postdec2	equ	0xFDD
  1619                           fsr2h	equ	0xFDA
  1620                           fsr2l	equ	0xFD9
  1621                           status	equ	0xFD8
  1622                           
  1623 ;; *************** function _Lcd_Out *****************
  1624 ;; Defined at:
  1625 ;;		line 95 in file "flex_lcd.h"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;  y               1    wreg     unsigned char 
  1628 ;;  x               1    3[COMRAM] unsigned char 
  1629 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
  1630 ;;		 -> STR_3(2), STR_2(2), STR_1(8), 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  y               1    6[COMRAM] unsigned char 
  1633 ;;  data            1    7[COMRAM] unsigned char 
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  1    wreg      void 
  1636 ;; Registers used:
  1637 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1643 ;;      Params:         3       0       0       0       0       0       0       0       0
  1644 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1645 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1646 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1647 ;;Total ram usage:        5 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; Hardware stack levels required when called:    1
  1650 ;; This function calls:
  1651 ;;		_Lcd_Chr_CP
  1652 ;;		_Lcd_Cmd
  1653 ;; This function is called by:
  1654 ;;		_main
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text9
  1659  000EB0                     __ptext9:
  1660                           	opt stack 0
  1661  000EB0                     _Lcd_Out:
  1662                           	opt stack 29
  1663                           
  1664                           ;incstack = 0
  1665                           ;Lcd_Out@y stored from wreg
  1666  000EB0  6E07               	movwf	Lcd_Out@y,c
  1667                           
  1668                           ;flex_lcd.h: 97: unsigned char data;
  1669                           ;flex_lcd.h: 98: switch (y)
  1670  000EB2  D00D               	goto	l1258
  1671  000EB4                     l1248:
  1672  000EB4  5004               	movf	Lcd_Out@x,w,c
  1673  000EB6  0F80               	addlw	128
  1674  000EB8  D008               	goto	L6
  1675  000EBA                     l1250:
  1676  000EBA  5004               	movf	Lcd_Out@x,w,c
  1677  000EBC  0FC0               	addlw	192
  1678  000EBE  D005               	goto	L6
  1679  000EC0                     l1252:
  1680  000EC0  5004               	movf	Lcd_Out@x,w,c
  1681  000EC2  0F94               	addlw	148
  1682  000EC4  D002               	goto	L6
  1683  000EC6                     l1254:
  1684  000EC6  5004               	movf	Lcd_Out@x,w,c
  1685  000EC8  0FD4               	addlw	212
  1686  000ECA                     L6:
  1687  000ECA  6E08               	movwf	Lcd_Out@data,c
  1688                           
  1689                           ;flex_lcd.h: 105: }
  1690                           
  1691                           ;flex_lcd.h: 104: default: break;
  1692  000ECC  D00D               	goto	l1260
  1693  000ECE                     l1258:
  1694  000ECE  5007               	movf	Lcd_Out@y,w,c
  1695                           
  1696                           ; Switch size 1, requested type "space"
  1697                           ; Number of cases is 4, Range of values is 1 to 4
  1698                           ; switch strategies available:
  1699                           ; Name         Instructions Cycles
  1700                           ; simple_byte           13     7 (average)
  1701                           ;	Chosen strategy is simple_byte
  1702  000ED0  0A01               	xorlw	1	; case 1
  1703  000ED2  B4D8               	btfsc	status,2,c
  1704  000ED4  D7EF               	goto	l1248
  1705  000ED6  0A03               	xorlw	3	; case 2
  1706  000ED8  B4D8               	btfsc	status,2,c
  1707  000EDA  D7EF               	goto	l1250
  1708  000EDC  0A01               	xorlw	1	; case 3
  1709  000EDE  B4D8               	btfsc	status,2,c
  1710  000EE0  D7EF               	goto	l1252
  1711  000EE2  0A07               	xorlw	7	; case 4
  1712  000EE4  B4D8               	btfsc	status,2,c
  1713  000EE6  D7EF               	goto	l1254
  1714  000EE8                     l1260:
  1715                           
  1716                           ;flex_lcd.h: 106: Lcd_Cmd(data);
  1717  000EE8  5008               	movf	Lcd_Out@data,w,c
  1718  000EEA  ECDF  F006         	call	_Lcd_Cmd
  1719                           
  1720                           ;flex_lcd.h: 107: while(*buffer)
  1721  000EEE  D00A               	goto	l1266
  1722  000EF0                     l1262:
  1723                           
  1724                           ;flex_lcd.h: 108: {
  1725                           ;flex_lcd.h: 109: Lcd_Chr_CP(*buffer);
  1726  000EF0  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  1727  000EF4  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  1728  000EF8                     	if	0	;tblptru may be non-zero
  1729  000EF8                     	endif
  1730  000EF8                     	if	0	;tblptru may be non-zero
  1731  000EF8                     	endif
  1732  000EF8  0008               	tblrd		*
  1733  000EFA  50F5               	movf	tablat,w,c
  1734  000EFC  ECE8  F005         	call	_Lcd_Chr_CP
  1735                           
  1736                           ;flex_lcd.h: 110: buffer++;
  1737  000F00  4A05               	infsnz	Lcd_Out@buffer,f,c
  1738  000F02  2A06               	incf	Lcd_Out@buffer+1,f,c
  1739  000F04                     l1266:
  1740  000F04  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  1741  000F08  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  1742  000F0C                     	if	0	;tblptru may be non-zero
  1743  000F0C                     	endif
  1744  000F0C                     	if	0	;tblptru may be non-zero
  1745  000F0C                     	endif
  1746  000F0C  0008               	tblrd		*
  1747  000F0E  50F5               	movf	tablat,w,c
  1748  000F10  0900               	iorlw	0
  1749  000F12  B4D8               	btfsc	status,2,c
  1750  000F14  0012               	return	
  1751  000F16  D7EC               	goto	l1262
  1752  000F18                     __end_of_Lcd_Out:
  1753                           	opt stack 0
  1754                           tblptru	equ	0xFF8
  1755                           tblptrh	equ	0xFF7
  1756                           tblptrl	equ	0xFF6
  1757                           tablat	equ	0xFF5
  1758                           prodh	equ	0xFF4
  1759                           prodl	equ	0xFF3
  1760                           wreg	equ	0xFE8
  1761                           indf2	equ	0xFDF
  1762                           postinc2	equ	0xFDE
  1763                           postdec2	equ	0xFDD
  1764                           fsr2h	equ	0xFDA
  1765                           fsr2l	equ	0xFD9
  1766                           status	equ	0xFD8
  1767                           
  1768 ;; *************** function _Lcd_Chr_CP *****************
  1769 ;; Defined at:
  1770 ;;		line 137 in file "flex_lcd.h"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;  data            1    wreg     unsigned char 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  data            1    2[COMRAM] unsigned char 
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  1    wreg      void 
  1777 ;; Registers used:
  1778 ;;		wreg, status,2, status,0
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1784 ;;      Params:         0       0       0       0       0       0       0       0       0
  1785 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1786 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1787 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1788 ;;Total ram usage:        3 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_Lcd_Out
  1794 ;;		_Lcd_Out2
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text10
  1799  000BD0                     __ptext10:
  1800                           	opt stack 0
  1801  000BD0                     _Lcd_Chr_CP:
  1802                           	opt stack 29
  1803                           
  1804                           ;incstack = 0
  1805                           ;Lcd_Chr_CP@data stored from wreg
  1806  000BD0  6E03               	movwf	Lcd_Chr_CP@data,c
  1807                           
  1808                           ;flex_lcd.h: 138: RD3 = 0; RD2 = 1;
  1809  000BD2  9683               	bcf	3971,3,c	;volatile
  1810  000BD4  8483               	bsf	3971,2,c	;volatile
  1811                           
  1812                           ;flex_lcd.h: 139: RD7 = (data & 0b10000000)>>7; RD6 = (data & 0b01000000)>>6;
  1813  000BD6  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  1814  000BD8  AE03               	btfss	Lcd_Chr_CP@data,7,c
  1815  000BDA  D001               	bra	u205
  1816  000BDC  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  1817  000BDE                     u205:
  1818  000BDE  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1819  000BE0  A0D8               	btfss	status,0,c
  1820  000BE2  D002               	goto	u210
  1821  000BE4  8E83               	bsf	3971,7,c	;volatile
  1822  000BE6  D001               	goto	u225
  1823  000BE8                     u210:
  1824  000BE8  9E83               	bcf	3971,7,c	;volatile
  1825  000BEA                     u225:
  1826  000BEA  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1827  000BEE  0E06               	movlw	6
  1828  000BF0  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  1829  000BF2                     u235:
  1830  000BF2  90D8               	bcf	status,0,c
  1831  000BF4  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1832  000BF6  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  1833  000BF8  D7FC               	goto	u235
  1834  000BFA  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1835  000BFC  A0D8               	btfss	status,0,c
  1836  000BFE  D002               	goto	u240
  1837  000C00  8C83               	bsf	3971,6,c	;volatile
  1838  000C02  D001               	goto	u255
  1839  000C04                     u240:
  1840  000C04  9C83               	bcf	3971,6,c	;volatile
  1841  000C06                     u255:
  1842                           
  1843                           ;flex_lcd.h: 140: RD5 = (data & 0b00100000)>>5; RD4 = (data & 0b00010000)>>4;
  1844  000C06  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1845  000C0A  0E05               	movlw	5
  1846  000C0C  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  1847  000C0E                     u265:
  1848  000C0E  90D8               	bcf	status,0,c
  1849  000C10  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1850  000C12  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  1851  000C14  D7FC               	goto	u265
  1852  000C16  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1853  000C18  A0D8               	btfss	status,0,c
  1854  000C1A  D002               	goto	u270
  1855  000C1C  8A83               	bsf	3971,5,c	;volatile
  1856  000C1E  D001               	goto	u285
  1857  000C20                     u270:
  1858  000C20  9A83               	bcf	3971,5,c	;volatile
  1859  000C22                     u285:
  1860  000C22  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1861  000C26  3A01               	swapf	??_Lcd_Chr_CP,f,c
  1862  000C28  0E0F               	movlw	15
  1863  000C2A  1601               	andwf	??_Lcd_Chr_CP,f,c
  1864  000C2C  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1865  000C2E  A0D8               	btfss	status,0,c
  1866  000C30  D002               	goto	u290
  1867  000C32  8883               	bsf	3971,4,c	;volatile
  1868  000C34  D001               	goto	l834
  1869  000C36                     u290:
  1870  000C36  9883               	bcf	3971,4,c	;volatile
  1871  000C38                     l834:
  1872                           
  1873                           ;flex_lcd.h: 141: _delay(10);
  1874  000C38  0E03               	movlw	3
  1875  000C3A                     u1087:
  1876  000C3A  2EE8               	decfsz	wreg,f,c
  1877  000C3C  D7FE               	bra	u1087
  1878  000C3E  F000               	nop	
  1879                           
  1880                           ;flex_lcd.h: 142: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  1881  000C40  8683               	bsf	3971,3,c	;volatile
  1882  000C42  0E03               	movlw	3
  1883  000C44                     u1097:
  1884  000C44  2EE8               	decfsz	wreg,f,c
  1885  000C46  D7FE               	bra	u1097
  1886  000C48  F000               	nop	
  1887  000C4A  9683               	bcf	3971,3,c	;volatile
  1888                           
  1889                           ;flex_lcd.h: 143: RD7 = (data & 0b00001000)>>3; RD6 = (data & 0b00000100)>>2;
  1890  000C4C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1891  000C50  90D8               	bcf	status,0,c
  1892  000C52  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1893  000C54  90D8               	bcf	status,0,c
  1894  000C56  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1895  000C58  90D8               	bcf	status,0,c
  1896  000C5A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1897  000C5C  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1898  000C5E  A0D8               	btfss	status,0,c
  1899  000C60  D002               	goto	u310
  1900  000C62  8E83               	bsf	3971,7,c	;volatile
  1901  000C64  D001               	goto	u325
  1902  000C66                     u310:
  1903  000C66  9E83               	bcf	3971,7,c	;volatile
  1904  000C68                     u325:
  1905  000C68  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1906  000C6C  90D8               	bcf	status,0,c
  1907  000C6E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1908  000C70  90D8               	bcf	status,0,c
  1909  000C72  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1910  000C74  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1911  000C76  A0D8               	btfss	status,0,c
  1912  000C78  D002               	goto	u330
  1913  000C7A  8C83               	bsf	3971,6,c	;volatile
  1914  000C7C  D001               	goto	u345
  1915  000C7E                     u330:
  1916  000C7E  9C83               	bcf	3971,6,c	;volatile
  1917  000C80                     u345:
  1918                           
  1919                           ;flex_lcd.h: 144: RD5 = (data & 0b00000010)>>1; RD4 = (data & 0b00000001);
  1920  000C80  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1921  000C84  90D8               	bcf	status,0,c
  1922  000C86  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1923  000C88  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1924  000C8A  A0D8               	btfss	status,0,c
  1925  000C8C  D002               	goto	u350
  1926  000C8E  8A83               	bsf	3971,5,c	;volatile
  1927  000C90  D001               	goto	l842
  1928  000C92                     u350:
  1929  000C92  9A83               	bcf	3971,5,c	;volatile
  1930  000C94                     l842:
  1931  000C94  A003               	btfss	Lcd_Chr_CP@data,0,c
  1932  000C96  D002               	goto	u370
  1933  000C98  8883               	bsf	3971,4,c	;volatile
  1934  000C9A  D001               	goto	l844
  1935  000C9C                     u370:
  1936  000C9C  9883               	bcf	3971,4,c	;volatile
  1937  000C9E                     l844:
  1938                           
  1939                           ;flex_lcd.h: 145: _delay(10);
  1940  000C9E  0E03               	movlw	3
  1941  000CA0                     u1107:
  1942  000CA0  2EE8               	decfsz	wreg,f,c
  1943  000CA2  D7FE               	bra	u1107
  1944  000CA4  F000               	nop	
  1945                           
  1946                           ;flex_lcd.h: 146: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  1947  000CA6  8683               	bsf	3971,3,c	;volatile
  1948  000CA8  0E03               	movlw	3
  1949  000CAA                     u1117:
  1950  000CAA  2EE8               	decfsz	wreg,f,c
  1951  000CAC  D7FE               	bra	u1117
  1952  000CAE  F000               	nop	
  1953  000CB0  9683               	bcf	3971,3,c	;volatile
  1954                           
  1955                           ;flex_lcd.h: 147: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned lon
      +                          g)((5500)*(8000000/4000000.0)));
  1956  000CB2  0E03               	movlw	3
  1957  000CB4                     u1127:
  1958  000CB4  2EE8               	decfsz	wreg,f,c
  1959  000CB6  D7FE               	bra	u1127
  1960  000CB8  F000               	nop	
  1961  000CBA  0E0F               	movlw	15
  1962  000CBC  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  1963  000CBE  0E48               	movlw	72
  1964  000CC0                     u1137:
  1965  000CC0  2EE8               	decfsz	wreg,f,c
  1966  000CC2  D7FE               	bra	u1137
  1967  000CC4  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  1968  000CC6  D7FC               	bra	u1137
  1969  000CC8  0012               	return		;funcret
  1970  000CCA                     __end_of_Lcd_Chr_CP:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           prodh	equ	0xFF4
  1977                           prodl	equ	0xFF3
  1978                           wreg	equ	0xFE8
  1979                           indf2	equ	0xFDF
  1980                           postinc2	equ	0xFDE
  1981                           postdec2	equ	0xFDD
  1982                           fsr2h	equ	0xFDA
  1983                           fsr2l	equ	0xFD9
  1984                           status	equ	0xFD8
  1985                           
  1986 ;; *************** function _Lcd_Init *****************
  1987 ;; Defined at:
  1988 ;;		line 53 in file "flex_lcd.h"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  data            1    4[COMRAM] unsigned char 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, status,2, status,0, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2002 ;;      Params:         0       0       0       0       0       0       0       0       0
  2003 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2004 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2005 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2006 ;;Total ram usage:        2 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    1
  2009 ;; This function calls:
  2010 ;;		_Lcd_Cmd
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text11
  2017  000AB6                     __ptext11:
  2018                           	opt stack 0
  2019  000AB6                     _Lcd_Init:
  2020                           	opt stack 29
  2021                           
  2022                           ;flex_lcd.h: 54: unsigned char data;
  2023                           ;flex_lcd.h: 55: TRISD7 = 0;
  2024                           
  2025                           ;incstack = 0
  2026  000AB6  9E95               	bcf	3989,7,c	;volatile
  2027                           
  2028                           ;flex_lcd.h: 56: TRISD6 = 0;
  2029  000AB8  9C95               	bcf	3989,6,c	;volatile
  2030                           
  2031                           ;flex_lcd.h: 57: TRISD5 = 0;
  2032  000ABA  9A95               	bcf	3989,5,c	;volatile
  2033                           
  2034                           ;flex_lcd.h: 58: TRISD4 = 0;
  2035  000ABC  9895               	bcf	3989,4,c	;volatile
  2036                           
  2037                           ;flex_lcd.h: 59: TRISD3 = 0;
  2038  000ABE  9695               	bcf	3989,3,c	;volatile
  2039                           
  2040                           ;flex_lcd.h: 60: TRISD2 = 0;
  2041  000AC0  9495               	bcf	3989,2,c	;volatile
  2042                           
  2043                           ;flex_lcd.h: 61: RD7 = 0;
  2044  000AC2  9E83               	bcf	3971,7,c	;volatile
  2045                           
  2046                           ;flex_lcd.h: 62: RD6 = 0;
  2047  000AC4  9C83               	bcf	3971,6,c	;volatile
  2048                           
  2049                           ;flex_lcd.h: 63: RD5 = 0;
  2050  000AC6  9A83               	bcf	3971,5,c	;volatile
  2051                           
  2052                           ;flex_lcd.h: 64: RD4 = 0;
  2053  000AC8  9883               	bcf	3971,4,c	;volatile
  2054                           
  2055                           ;flex_lcd.h: 65: RD3 = 0;
  2056  000ACA  9683               	bcf	3971,3,c	;volatile
  2057                           
  2058                           ;flex_lcd.h: 66: RD2 = 0;
  2059  000ACC  9483               	bcf	3971,2,c	;volatile
  2060                           
  2061                           ;flex_lcd.h: 67: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2062  000ACE  0E0F               	movlw	15
  2063  000AD0  6E04               	movwf	??_Lcd_Init& (0+255),c
  2064  000AD2  0E48               	movlw	72
  2065  000AD4                     u1147:
  2066  000AD4  2EE8               	decfsz	wreg,f,c
  2067  000AD6  D7FE               	bra	u1147
  2068  000AD8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2069  000ADA  D7FC               	bra	u1147
  2070                           
  2071                           ;flex_lcd.h: 68: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2072  000ADC  0E0F               	movlw	15
  2073  000ADE  6E04               	movwf	??_Lcd_Init& (0+255),c
  2074  000AE0  0E48               	movlw	72
  2075  000AE2                     u1157:
  2076  000AE2  2EE8               	decfsz	wreg,f,c
  2077  000AE4  D7FE               	bra	u1157
  2078  000AE6  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2079  000AE8  D7FC               	bra	u1157
  2080                           
  2081                           ;flex_lcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2082  000AEA  0E0F               	movlw	15
  2083  000AEC  6E04               	movwf	??_Lcd_Init& (0+255),c
  2084  000AEE  0E48               	movlw	72
  2085  000AF0                     u1167:
  2086  000AF0  2EE8               	decfsz	wreg,f,c
  2087  000AF2  D7FE               	bra	u1167
  2088  000AF4  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2089  000AF6  D7FC               	bra	u1167
  2090                           
  2091                           ;flex_lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2092  000AF8  0E0F               	movlw	15
  2093  000AFA  6E04               	movwf	??_Lcd_Init& (0+255),c
  2094  000AFC  0E48               	movlw	72
  2095  000AFE                     u1177:
  2096  000AFE  2EE8               	decfsz	wreg,f,c
  2097  000B00  D7FE               	bra	u1177
  2098  000B02  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2099  000B04  D7FC               	bra	u1177
  2100                           
  2101                           ;flex_lcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2102  000B06  0E0F               	movlw	15
  2103  000B08  6E04               	movwf	??_Lcd_Init& (0+255),c
  2104  000B0A  0E48               	movlw	72
  2105  000B0C                     u1187:
  2106  000B0C  2EE8               	decfsz	wreg,f,c
  2107  000B0E  D7FE               	bra	u1187
  2108  000B10  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2109  000B12  D7FC               	bra	u1187
  2110                           
  2111                           ;flex_lcd.h: 72: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2112  000B14  0E0F               	movlw	15
  2113  000B16  6E04               	movwf	??_Lcd_Init& (0+255),c
  2114  000B18  0E48               	movlw	72
  2115  000B1A                     u1197:
  2116  000B1A  2EE8               	decfsz	wreg,f,c
  2117  000B1C  D7FE               	bra	u1197
  2118  000B1E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2119  000B20  D7FC               	bra	u1197
  2120                           
  2121                           ;flex_lcd.h: 73: for(data = 1; data < 4; data ++)
  2122  000B22  0E01               	movlw	1
  2123  000B24  6E05               	movwf	Lcd_Init@data,c
  2124  000B26                     l918:
  2125  000B26  0E03               	movlw	3
  2126  000B28  6405               	cpfsgt	Lcd_Init@data,c
  2127  000B2A  D001               	goto	l69
  2128  000B2C  D01F               	goto	l70
  2129  000B2E                     l69:
  2130                           
  2131                           ;flex_lcd.h: 74: {
  2132                           ;flex_lcd.h: 75: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1; RD3 = 0;
  2133  000B2E  9E83               	bcf	3971,7,c	;volatile
  2134  000B30  9C83               	bcf	3971,6,c	;volatile
  2135  000B32  8A83               	bsf	3971,5,c	;volatile
  2136  000B34  8883               	bsf	3971,4,c	;volatile
  2137  000B36  9683               	bcf	3971,3,c	;volatile
  2138                           
  2139                           ;flex_lcd.h: 76: RD2 = 0; RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1;
  2140  000B38  9483               	bcf	3971,2,c	;volatile
  2141  000B3A  9E83               	bcf	3971,7,c	;volatile
  2142  000B3C  9C83               	bcf	3971,6,c	;volatile
  2143  000B3E  8A83               	bsf	3971,5,c	;volatile
  2144  000B40  8883               	bsf	3971,4,c	;volatile
  2145                           
  2146                           ;flex_lcd.h: 77: RD3 = 1; RD2 = 0;
  2147  000B42  8683               	bsf	3971,3,c	;volatile
  2148  000B44  9483               	bcf	3971,2,c	;volatile
  2149                           
  2150                           ;flex_lcd.h: 78: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2151  000B46  0E03               	movlw	3
  2152  000B48                     u1207:
  2153  000B48  2EE8               	decfsz	wreg,f,c
  2154  000B4A  D7FE               	bra	u1207
  2155  000B4C  F000               	nop	
  2156                           
  2157                           ;flex_lcd.h: 79: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1; RD3 = 0;
  2158  000B4E  9E83               	bcf	3971,7,c	;volatile
  2159  000B50  9C83               	bcf	3971,6,c	;volatile
  2160  000B52  8A83               	bsf	3971,5,c	;volatile
  2161  000B54  8883               	bsf	3971,4,c	;volatile
  2162  000B56  9683               	bcf	3971,3,c	;volatile
  2163                           
  2164                           ;flex_lcd.h: 80: RD2 = 0;
  2165  000B58  9483               	bcf	3971,2,c	;volatile
  2166                           
  2167                           ;flex_lcd.h: 81: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2168  000B5A  0E0F               	movlw	15
  2169  000B5C  6E04               	movwf	??_Lcd_Init& (0+255),c
  2170  000B5E  0E48               	movlw	72
  2171  000B60                     u1217:
  2172  000B60  2EE8               	decfsz	wreg,f,c
  2173  000B62  D7FE               	bra	u1217
  2174  000B64  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2175  000B66  D7FC               	bra	u1217
  2176  000B68  2A05               	incf	Lcd_Init@data,f,c
  2177  000B6A  D7DD               	goto	l918
  2178  000B6C                     l70:
  2179                           
  2180                           ;flex_lcd.h: 82: }
  2181                           ;flex_lcd.h: 83: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 0; RD2 = 0;
  2182  000B6C  9E83               	bcf	3971,7,c	;volatile
  2183  000B6E  9C83               	bcf	3971,6,c	;volatile
  2184  000B70  8A83               	bsf	3971,5,c	;volatile
  2185  000B72  9883               	bcf	3971,4,c	;volatile
  2186  000B74  9683               	bcf	3971,3,c	;volatile
  2187  000B76  9483               	bcf	3971,2,c	;volatile
  2188                           
  2189                           ;flex_lcd.h: 84: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 1; RD2 = 0;
  2190  000B78  9E83               	bcf	3971,7,c	;volatile
  2191  000B7A  9C83               	bcf	3971,6,c	;volatile
  2192  000B7C  8A83               	bsf	3971,5,c	;volatile
  2193  000B7E  9883               	bcf	3971,4,c	;volatile
  2194  000B80  8683               	bsf	3971,3,c	;volatile
  2195  000B82  9483               	bcf	3971,2,c	;volatile
  2196                           
  2197                           ;flex_lcd.h: 85: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2198  000B84  0E03               	movlw	3
  2199  000B86                     u1227:
  2200  000B86  2EE8               	decfsz	wreg,f,c
  2201  000B88  D7FE               	bra	u1227
  2202  000B8A  F000               	nop	
  2203                           
  2204                           ;flex_lcd.h: 86: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 0; RD2 = 0;
  2205  000B8C  9E83               	bcf	3971,7,c	;volatile
  2206  000B8E  9C83               	bcf	3971,6,c	;volatile
  2207  000B90  8A83               	bsf	3971,5,c	;volatile
  2208  000B92  9883               	bcf	3971,4,c	;volatile
  2209  000B94  9683               	bcf	3971,3,c	;volatile
  2210  000B96  9483               	bcf	3971,2,c	;volatile
  2211                           
  2212                           ;flex_lcd.h: 87: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2213  000B98  0E0F               	movlw	15
  2214  000B9A  6E04               	movwf	??_Lcd_Init& (0+255),c
  2215  000B9C  0E48               	movlw	72
  2216  000B9E                     u1237:
  2217  000B9E  2EE8               	decfsz	wreg,f,c
  2218  000BA0  D7FE               	bra	u1237
  2219  000BA2  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2220  000BA4  D7FC               	bra	u1237
  2221                           
  2222                           ;flex_lcd.h: 88: data = 40; Lcd_Cmd(data);
  2223  000BA6  0E28               	movlw	40
  2224  000BA8  6E05               	movwf	Lcd_Init@data,c
  2225  000BAA  5005               	movf	Lcd_Init@data,w,c
  2226  000BAC  ECDF  F006         	call	_Lcd_Cmd
  2227                           
  2228                           ;flex_lcd.h: 89: data = 16; Lcd_Cmd(data);
  2229  000BB0  0E10               	movlw	16
  2230  000BB2  6E05               	movwf	Lcd_Init@data,c
  2231  000BB4  5005               	movf	Lcd_Init@data,w,c
  2232  000BB6  ECDF  F006         	call	_Lcd_Cmd
  2233                           
  2234                           ;flex_lcd.h: 90: data = 1; Lcd_Cmd(data);
  2235  000BBA  0E01               	movlw	1
  2236  000BBC  6E05               	movwf	Lcd_Init@data,c
  2237  000BBE  5005               	movf	Lcd_Init@data,w,c
  2238  000BC0  ECDF  F006         	call	_Lcd_Cmd
  2239                           
  2240                           ;flex_lcd.h: 91: data = 15; Lcd_Cmd(data);
  2241  000BC4  0E0F               	movlw	15
  2242  000BC6  6E05               	movwf	Lcd_Init@data,c
  2243  000BC8  5005               	movf	Lcd_Init@data,w,c
  2244  000BCA  ECDF  F006         	call	_Lcd_Cmd
  2245  000BCE  0012               	return		;funcret
  2246  000BD0                     __end_of_Lcd_Init:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           tblptrl	equ	0xFF6
  2251                           tablat	equ	0xFF5
  2252                           prodh	equ	0xFF4
  2253                           prodl	equ	0xFF3
  2254                           wreg	equ	0xFE8
  2255                           indf2	equ	0xFDF
  2256                           postinc2	equ	0xFDE
  2257                           postdec2	equ	0xFDD
  2258                           fsr2h	equ	0xFDA
  2259                           fsr2l	equ	0xFD9
  2260                           status	equ	0xFD8
  2261                           
  2262 ;; *************** function _Lcd_Cmd *****************
  2263 ;; Defined at:
  2264 ;;		line 151 in file "flex_lcd.h"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  data            1    wreg     unsigned char 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  data            1    2[COMRAM] unsigned char 
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1    wreg      void 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2278 ;;      Params:         0       0       0       0       0       0       0       0       0
  2279 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2280 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2281 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2282 ;;Total ram usage:        3 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; This function calls:
  2285 ;;		Nothing
  2286 ;; This function is called by:
  2287 ;;		_Lcd_Init
  2288 ;;		_Lcd_Out
  2289 ;;		_Lcd_Out2
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           	psect	text12
  2294  000DBE                     __ptext12:
  2295                           	opt stack 0
  2296  000DBE                     _Lcd_Cmd:
  2297                           	opt stack 29
  2298                           
  2299                           ;incstack = 0
  2300                           ;Lcd_Cmd@data stored from wreg
  2301  000DBE  6E03               	movwf	Lcd_Cmd@data,c
  2302                           
  2303                           ;flex_lcd.h: 152: RD3 = 0; RD2 = 0;
  2304  000DC0  9683               	bcf	3971,3,c	;volatile
  2305  000DC2  9483               	bcf	3971,2,c	;volatile
  2306                           
  2307                           ;flex_lcd.h: 153: RD7 = (data & 0b10000000)>>7; RD6 = (data & 0b01000000)>>6;
  2308  000DC4  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  2309  000DC6  AE03               	btfss	Lcd_Cmd@data,7,c
  2310  000DC8  D001               	bra	u15
  2311  000DCA  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  2312  000DCC                     u15:
  2313  000DCC  3001               	rrcf	??_Lcd_Cmd,w,c
  2314  000DCE  A0D8               	btfss	status,0,c
  2315  000DD0  D002               	goto	u20
  2316  000DD2  8E83               	bsf	3971,7,c	;volatile
  2317  000DD4  D001               	goto	u35
  2318  000DD6                     u20:
  2319  000DD6  9E83               	bcf	3971,7,c	;volatile
  2320  000DD8                     u35:
  2321  000DD8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2322  000DDC  0E06               	movlw	6
  2323  000DDE  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  2324  000DE0                     u45:
  2325  000DE0  90D8               	bcf	status,0,c
  2326  000DE2  3201               	rrcf	??_Lcd_Cmd,f,c
  2327  000DE4  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  2328  000DE6  D7FC               	goto	u45
  2329  000DE8  3001               	rrcf	??_Lcd_Cmd,w,c
  2330  000DEA  A0D8               	btfss	status,0,c
  2331  000DEC  D002               	goto	u50
  2332  000DEE  8C83               	bsf	3971,6,c	;volatile
  2333  000DF0  D001               	goto	u65
  2334  000DF2                     u50:
  2335  000DF2  9C83               	bcf	3971,6,c	;volatile
  2336  000DF4                     u65:
  2337                           
  2338                           ;flex_lcd.h: 154: RD5 = (data & 0b00100000)>>5; RD4 = (data & 0b00010000)>>4;
  2339  000DF4  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2340  000DF8  0E05               	movlw	5
  2341  000DFA  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  2342  000DFC                     u75:
  2343  000DFC  90D8               	bcf	status,0,c
  2344  000DFE  3201               	rrcf	??_Lcd_Cmd,f,c
  2345  000E00  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  2346  000E02  D7FC               	goto	u75
  2347  000E04  3001               	rrcf	??_Lcd_Cmd,w,c
  2348  000E06  A0D8               	btfss	status,0,c
  2349  000E08  D002               	goto	u80
  2350  000E0A  8A83               	bsf	3971,5,c	;volatile
  2351  000E0C  D001               	goto	u95
  2352  000E0E                     u80:
  2353  000E0E  9A83               	bcf	3971,5,c	;volatile
  2354  000E10                     u95:
  2355  000E10  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2356  000E14  3A01               	swapf	??_Lcd_Cmd,f,c
  2357  000E16  0E0F               	movlw	15
  2358  000E18  1601               	andwf	??_Lcd_Cmd,f,c
  2359  000E1A  3001               	rrcf	??_Lcd_Cmd,w,c
  2360  000E1C  A0D8               	btfss	status,0,c
  2361  000E1E  D002               	goto	u100
  2362  000E20  8883               	bsf	3971,4,c	;volatile
  2363  000E22  D001               	goto	l810
  2364  000E24                     u100:
  2365  000E24  9883               	bcf	3971,4,c	;volatile
  2366  000E26                     l810:
  2367                           
  2368                           ;flex_lcd.h: 155: _delay(10);
  2369  000E26  0E03               	movlw	3
  2370  000E28                     u1247:
  2371  000E28  2EE8               	decfsz	wreg,f,c
  2372  000E2A  D7FE               	bra	u1247
  2373  000E2C  F000               	nop	
  2374                           
  2375                           ;flex_lcd.h: 156: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  2376  000E2E  8683               	bsf	3971,3,c	;volatile
  2377  000E30  0E03               	movlw	3
  2378  000E32                     u1257:
  2379  000E32  2EE8               	decfsz	wreg,f,c
  2380  000E34  D7FE               	bra	u1257
  2381  000E36  F000               	nop	
  2382  000E38  9683               	bcf	3971,3,c	;volatile
  2383                           
  2384                           ;flex_lcd.h: 157: RD7 = (data & 0b00001000)>>3; RD6 = (data & 0b00000100)>>2;
  2385  000E3A  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2386  000E3E  90D8               	bcf	status,0,c
  2387  000E40  3201               	rrcf	??_Lcd_Cmd,f,c
  2388  000E42  90D8               	bcf	status,0,c
  2389  000E44  3201               	rrcf	??_Lcd_Cmd,f,c
  2390  000E46  90D8               	bcf	status,0,c
  2391  000E48  3201               	rrcf	??_Lcd_Cmd,f,c
  2392  000E4A  3001               	rrcf	??_Lcd_Cmd,w,c
  2393  000E4C  A0D8               	btfss	status,0,c
  2394  000E4E  D002               	goto	u120
  2395  000E50  8E83               	bsf	3971,7,c	;volatile
  2396  000E52  D001               	goto	u135
  2397  000E54                     u120:
  2398  000E54  9E83               	bcf	3971,7,c	;volatile
  2399  000E56                     u135:
  2400  000E56  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2401  000E5A  90D8               	bcf	status,0,c
  2402  000E5C  3201               	rrcf	??_Lcd_Cmd,f,c
  2403  000E5E  90D8               	bcf	status,0,c
  2404  000E60  3201               	rrcf	??_Lcd_Cmd,f,c
  2405  000E62  3001               	rrcf	??_Lcd_Cmd,w,c
  2406  000E64  A0D8               	btfss	status,0,c
  2407  000E66  D002               	goto	u140
  2408  000E68  8C83               	bsf	3971,6,c	;volatile
  2409  000E6A  D001               	goto	u155
  2410  000E6C                     u140:
  2411  000E6C  9C83               	bcf	3971,6,c	;volatile
  2412  000E6E                     u155:
  2413                           
  2414                           ;flex_lcd.h: 158: RD5 = (data & 0b00000010)>>1; RD4 = (data & 0b00000001);
  2415  000E6E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2416  000E72  90D8               	bcf	status,0,c
  2417  000E74  3201               	rrcf	??_Lcd_Cmd,f,c
  2418  000E76  3001               	rrcf	??_Lcd_Cmd,w,c
  2419  000E78  A0D8               	btfss	status,0,c
  2420  000E7A  D002               	goto	u160
  2421  000E7C  8A83               	bsf	3971,5,c	;volatile
  2422  000E7E  D001               	goto	l818
  2423  000E80                     u160:
  2424  000E80  9A83               	bcf	3971,5,c	;volatile
  2425  000E82                     l818:
  2426  000E82  A003               	btfss	Lcd_Cmd@data,0,c
  2427  000E84  D002               	goto	u180
  2428  000E86  8883               	bsf	3971,4,c	;volatile
  2429  000E88  D001               	goto	l820
  2430  000E8A                     u180:
  2431  000E8A  9883               	bcf	3971,4,c	;volatile
  2432  000E8C                     l820:
  2433                           
  2434                           ;flex_lcd.h: 159: _delay(10);
  2435  000E8C  0E03               	movlw	3
  2436  000E8E                     u1267:
  2437  000E8E  2EE8               	decfsz	wreg,f,c
  2438  000E90  D7FE               	bra	u1267
  2439  000E92  F000               	nop	
  2440                           
  2441                           ;flex_lcd.h: 160: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  2442  000E94  8683               	bsf	3971,3,c	;volatile
  2443  000E96  0E03               	movlw	3
  2444  000E98                     u1277:
  2445  000E98  2EE8               	decfsz	wreg,f,c
  2446  000E9A  D7FE               	bra	u1277
  2447  000E9C  F000               	nop	
  2448  000E9E  9683               	bcf	3971,3,c	;volatile
  2449                           
  2450                           ;flex_lcd.h: 161: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2451  000EA0  0E0F               	movlw	15
  2452  000EA2  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  2453  000EA4  0E48               	movlw	72
  2454  000EA6                     u1287:
  2455  000EA6  2EE8               	decfsz	wreg,f,c
  2456  000EA8  D7FE               	bra	u1287
  2457  000EAA  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  2458  000EAC  D7FC               	bra	u1287
  2459  000EAE  0012               	return		;funcret
  2460  000EB0                     __end_of_Lcd_Cmd:
  2461                           	opt stack 0
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           prodh	equ	0xFF4
  2467                           prodl	equ	0xFF3
  2468                           wreg	equ	0xFE8
  2469                           indf2	equ	0xFDF
  2470                           postinc2	equ	0xFDE
  2471                           postdec2	equ	0xFDD
  2472                           fsr2h	equ	0xFDA
  2473                           fsr2l	equ	0xFD9
  2474                           status	equ	0xFD8
  2475                           
  2476 ;; *************** function _ConfiSerial9600 *****************
  2477 ;; Defined at:
  2478 ;;		line 16 in file "PicPicEsclavo.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;		None
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  SPBRGC          4    8[COMRAM] long 
  2483 ;;  AUX             4    4[COMRAM] long 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0
  2494 ;;      Locals:         8       0       0       0       0       0       0       0       0
  2495 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2496 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2497 ;;Total ram usage:       12 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; This function calls:
  2500 ;;		Nothing
  2501 ;; This function is called by:
  2502 ;;		_main
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text13
  2507  000F18                     __ptext13:
  2508                           	opt stack 0
  2509  000F18                     _ConfiSerial9600:
  2510                           	opt stack 30
  2511                           
  2512                           ;PicPicEsclavo.c: 18: TRISC7 = 1;
  2513                           
  2514                           ;incstack = 0
  2515  000F18  8E94               	bsf	3988,7,c	;volatile
  2516                           
  2517                           ;PicPicEsclavo.c: 19: TRISC6 = 1;
  2518  000F1A  8C94               	bsf	3988,6,c	;volatile
  2519                           
  2520                           ;PicPicEsclavo.c: 20: BAUDCON=0b01011000;
  2521  000F1C  0E58               	movlw	88
  2522  000F1E  6EB8               	movwf	4024,c	;volatile
  2523                           
  2524                           ;PicPicEsclavo.c: 21: TXSTA= 0b00100110;
  2525  000F20  0E26               	movlw	38
  2526  000F22  6EAC               	movwf	4012,c	;volatile
  2527                           
  2528                           ;PicPicEsclavo.c: 23: long SPBRGC =207;
  2529  000F24  0ECF               	movlw	207
  2530  000F26  6E09               	movwf	ConfiSerial9600@SPBRGC,c
  2531  000F28  0E00               	movlw	0
  2532  000F2A  6E0A               	movwf	ConfiSerial9600@SPBRGC+1,c
  2533  000F2C  0E00               	movlw	0
  2534  000F2E  6E0B               	movwf	ConfiSerial9600@SPBRGC+2,c
  2535  000F30  0E00               	movlw	0
  2536  000F32  6E0C               	movwf	ConfiSerial9600@SPBRGC+3,c
  2537                           
  2538                           ;PicPicEsclavo.c: 24: long AUX =SPBRGC;
  2539  000F34  C009  F005         	movff	ConfiSerial9600@SPBRGC,ConfiSerial9600@AUX
  2540  000F38  C00A  F006         	movff	ConfiSerial9600@SPBRGC+1,ConfiSerial9600@AUX+1
  2541  000F3C  C00B  F007         	movff	ConfiSerial9600@SPBRGC+2,ConfiSerial9600@AUX+2
  2542  000F40  C00C  F008         	movff	ConfiSerial9600@SPBRGC+3,ConfiSerial9600@AUX+3
  2543                           
  2544                           ;PicPicEsclavo.c: 25: SPBRGC= SPBRGC >>8;
  2545  000F44  C00A  F001         	movff	ConfiSerial9600@SPBRGC+1,??_ConfiSerial9600
  2546  000F48  C00B  F002         	movff	ConfiSerial9600@SPBRGC+2,??_ConfiSerial9600+1
  2547  000F4C  C00C  F003         	movff	ConfiSerial9600@SPBRGC+3,??_ConfiSerial9600+2
  2548  000F50  6A04               	clrf	(??_ConfiSerial9600+3)& (0+255),c
  2549  000F52  BE03               	btfsc	(??_ConfiSerial9600+2)& (0+255),7,c
  2550  000F54  6804               	setf	(??_ConfiSerial9600+3)& (0+255),c
  2551  000F56  C001  F009         	movff	??_ConfiSerial9600,ConfiSerial9600@SPBRGC
  2552  000F5A  C002  F00A         	movff	??_ConfiSerial9600+1,ConfiSerial9600@SPBRGC+1
  2553  000F5E  C003  F00B         	movff	??_ConfiSerial9600+2,ConfiSerial9600@SPBRGC+2
  2554  000F62  C004  F00C         	movff	??_ConfiSerial9600+3,ConfiSerial9600@SPBRGC+3
  2555                           
  2556                           ;PicPicEsclavo.c: 26: SPBRGH=SPBRGC;
  2557  000F66  C009  FFB0         	movff	ConfiSerial9600@SPBRGC,4016	;volatile
  2558                           
  2559                           ;PicPicEsclavo.c: 27: SPBRGC= AUX & 0b00000000011111111;
  2560  000F6A  5005               	movf	ConfiSerial9600@AUX,w,c
  2561  000F6C  6E09               	movwf	ConfiSerial9600@SPBRGC,c
  2562  000F6E  6A0A               	clrf	ConfiSerial9600@SPBRGC+1,c
  2563  000F70  6A0B               	clrf	ConfiSerial9600@SPBRGC+2,c
  2564  000F72  6A0C               	clrf	ConfiSerial9600@SPBRGC+3,c
  2565                           
  2566                           ;PicPicEsclavo.c: 28: SPBRG=SPBRGC;
  2567  000F74  C009  FFAF         	movff	ConfiSerial9600@SPBRGC,4015	;volatile
  2568                           
  2569                           ;PicPicEsclavo.c: 29: RCSTAbits.SPEN=1;
  2570  000F78  8EAB               	bsf	4011,7,c	;volatile
  2571  000F7A  0012               	return		;funcret
  2572  000F7C                     __end_of_ConfiSerial9600:
  2573                           	opt stack 0
  2574                           tblptru	equ	0xFF8
  2575                           tblptrh	equ	0xFF7
  2576                           tblptrl	equ	0xFF6
  2577                           tablat	equ	0xFF5
  2578                           prodh	equ	0xFF4
  2579                           prodl	equ	0xFF3
  2580                           wreg	equ	0xFE8
  2581                           indf2	equ	0xFDF
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           prodh	equ	0xFF4
  2592                           prodl	equ	0xFF3
  2593                           wreg	equ	0xFE8
  2594                           indf2	equ	0xFDF
  2595                           postinc2	equ	0xFDE
  2596                           postdec2	equ	0xFDD
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601                           	psect	rparam
  2602  0000                     tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           wreg	equ	0xFE8
  2609                           indf2	equ	0xFDF
  2610                           postinc2	equ	0xFDE
  2611                           postdec2	equ	0xFDD
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8


Data Sizes:
    Strings     27
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     55      55
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_5(CODE[12]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(COMRAM[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    4231
                                             31 COMRAM    24    24      0
                    _ConfiSerial9600
                           _Lcd_Init
                            _Lcd_Out
                           _Lcd_Out2
                              _OFFRX
                               _ONRX
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    2216
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _ONRX                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OFFRX                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3     725
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              5     2      3     877
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     210
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ConfiSerial9600                                     12    12      0      75
                                              0 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfiSerial9600
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   _OFFRX
   _ONRX
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     37      37       1       57.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Oct 19 02:14:48 2017

 __end_of_ConfiSerial9600 0F7C                        l70 0B6C                        l69 0B2E  
                      u20 0DD6                        u15 0DCC                        u50 0DF2  
                      u35 0DD8                        u45 0DE0                        u80 0E0E  
                      u65 0DF4                        u75 0DFC                        u95 0E10  
             __CFG_BOR$ON 000000       ___wmul@multiplicand 0003               __CFG_BORV$3 000000  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000               __CFG_LVP$ON 000000                       l122 0D20  
                     l119 0CFC                       l810 0E26                       l820 0E8C  
                     l818 0E82                       l842 0C94                       l834 0C38  
                     l587 1026                       l844 0C9E                       l597 1068  
                     l918 0B26              __CFG_CPB$OFF 000000                       _RD2 007C1A  
                     _RD3 007C1B                       u100 0E24                       _RD4 007C1C  
                     _RD5 007C1D                       _RD6 007C1E                       _RD7 007C1F  
                     u120 0E54                       u210 0BE8                       u140 0E6C  
                     u205 0BDE                       u310 0C66                       u135 0E56  
                     u160 0E80                       u240 0C04                       u225 0BEA  
                     u330 0C7E                       u155 0E6E                       u235 0BF2  
                     u180 0E8A                       u325 0C68                       u350 0C92  
                     u270 0C20                       u255 0C06                       u345 0C80  
                     u265 0C0E                       u370 0C9C                       u290 0C36  
            __CFG_CPD$OFF 000000                       u285 0C22                       wreg 000FE8  
            __CFG_WDT$OFF 000000                      l1300 085A                      l1214 0FF4  
                    l1310 088E                      l1216 0FFC                      l1400 0AA8  
                    l1320 08EA                      l1304 0860                      l1250 0EBA  
                    l1226 101C                      l1218 1000                      l1242 105E  
                    l1234 103E                      l1322 0910                      l1252 0EC0  
                    l1260 0EE8                      l1236 1046                      l1332 0938  
                    l1412 0CEA                      l1262 0EF0                      l1254 0EC6  
                    l1270 0F80                      l1238 104A                      l1334 093C  
                    l1248 0EB4                      l1272 0F86                      l1280 0F9A  
                    l1352 0982                      l1432 0D52                      l1440 0D84  
                    l1266 0F04                      l1258 0ECE                      l1274 0F8C  
                    l1282 0FB4                      l1346 0968                      l1284 0FBC  
                    l1276 0F92                      l1356 09A6                      l1292 0832  
                    l1198 10AE                      l1390 0A36                      l1382 0A14  
                    l1366 09CE                      l1374 09EE                      l1358 09AE  
                    l1438 0D80                      l1288 0FCE                      l1376 09F6  
                    l1298 084C                      l1396 0A88                      l1388 0A30  
                    l1398 0A90                      STR_1 0817                      STR_2 0824  
                    STR_3 0815                      STR_4 081F                      STR_5 080B  
                    u1107 0CA0                      u1117 0CAA                      u1207 0B48  
                    u1127 0CB4                      u1217 0B60                      u1137 0CC0  
                    u1227 0B86                      u1147 0AD4                      u1237 0B9E  
                    u1157 0AE2                      u1077 0D2E                      u1247 0E28  
                    u1167 0AF0                      u1087 0C3A                      u1257 0E32  
                    u1177 0AFE                      u1097 0C44                      u1267 0E8E  
                    u1187 0B0C                      u1277 0E98                      u1197 0B1A  
                    u1287 0EA6                      _RCIF 007CF5                      _ONRX 10C0  
                    _TRMT 007D61                      _TXIF 007CF4                      _main 0CCA  
                    fsr2h 000FDA                      indf2 000FDF                      fsr2l 000FD9  
                    prodh 000FF4                      prodl 000FF3                      start 0000  
           __CFG_IESO$OFF 000000           __end_of_Lcd_Cmd 0EB0           __end_of_Lcd_Out 0F18  
           __CFG_MCLRE$ON 000000              ___param_bank 000000                _Lcd_Chr_CP 0BD0  
          Lcd_Out2@buffer 0005                     ?_ONRX 0001             __CFG_PLLDIV$2 000000  
          __CFG_CCP2MX$ON 000000                     ?_main 0001           __end_of___lwdiv 1030  
         __end_of___lwmod 1072                     _OFFRX 10C6                     _RCREG 000FAE  
                   _RCSTA 000FAB                     _SPBRG 000FAF                     _PORTB 000F81  
           __CFG_USBDIV$1 000000                     _TRISB 000F93                     _TXREG 000FAD  
                   _TXSTA 000FAC             __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000  
           __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000  
         __end_of_dpowers 080B           __end_of_isdigit 10B6                     tablat 000FF5  
                   status 000FD8           __end_of_sprintf 0AB6            __CFG_ICPRT$OFF 000000  
          __CFG_PBADEN$ON 000000          __end_of_Lcd_Init 0BD0          __end_of_Lcd_Out2 0FDE  
            __end_of_ONRX 10C6           __initialization 10B6              __end_of_main 0DBE  
        ?_ConfiSerial9600 0001                    ??_ONRX 0001                    ??_main 0020  
           __activetblptr 000002                    ?_OFFRX 0001                    _ADCON1 000FC1  
                  _OSCCON 000FD3                 ??_Lcd_Cmd 0001                    _SPBRGH 000FB0  
               ??_Lcd_Out 0007                    _TRISD2 007CAA                    _TRISD3 007CAB  
                  _TRISD4 007CAC                    _TRISC6 007CA6                    _TRISD5 007CAD  
                  _TRISC7 007CA7                    _TRISD6 007CAE                    _TRISD7 007CAF  
          __CFG_XINST$OFF 000000               ?_Lcd_Chr_CP 0001                    ___wmul 1072  
          __CFG_STVREN$ON 000000                 ??___lwdiv 0005                 ??___lwmod 000C  
               ??_isdigit 0001              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                 ??_sprintf 0013  
              __accesstop 0060   __end_of__initialization 10B6             ___rparam_used 000001  
           __end_of_OFFRX 10CC            __pcstackCOMRAM 0001                   ??_OFFRX 0001  
               ?_Lcd_Init 0001                 ?_Lcd_Out2 0004              sprintf@width 001D  
     __size_of_Lcd_Chr_CP 00FA                   ?___wmul 0001                   _BAUDCON 000FB8  
              ??_Lcd_Init 0004                ??_Lcd_Out2 0007           __CFG_VREGEN$OFF 000000  
                 _Lcd_Cmd 0DBE                   _Lcd_Out 0EB0                   __Hparam 0000  
                 __Lparam 0000           __size_of___wmul 0026                   ___lwdiv 0FDE  
                 ___lwmod 1030              __psmallconst 0800                   __pcinit 10B6  
                 __ramtop 0800                   __ptext0 0CCA                   __ptext1 0828  
                 __ptext2 1098                   __ptext3 1072                   __ptext4 1030  
                 __ptext5 0FDE                   __ptext6 10C0                   __ptext7 10C6  
                 __ptext8 0F7C                   __ptext9 0EB0                   _dpowers 0801  
                 _isdigit 1098                   _sprintf 0828      end_of_initialization 10B6  
           __Lmediumconst 0000                 _RCSTAbits 000FAB              ??_Lcd_Chr_CP 0001  
               Lcd_Out2@x 0004                 Lcd_Out2@y 0007                   postdec2 000FDD  
                 postinc2 000FDE     ConfiSerial9600@SPBRGC 0009  __size_of_ConfiSerial9600 0064  
      __end_of_Lcd_Chr_CP 0CCA                main@buffer 0022                main@espera 0036  
          __end_of___wmul 1098       start_initialization 10B6             Lcd_Out@buffer 0005  
       __size_of_Lcd_Init 011A         __size_of_Lcd_Out2 0062                  ??___wmul 0005  
        __CFG_LPT1OSC$OFF 000000         ??_ConfiSerial9600 0001                  ?_Lcd_Cmd 0001  
             sprintf@flag 001C                  ?_Lcd_Out 0004               sprintf@prec 0019  
        ___lwdiv@dividend 0001                  ?___lwdiv 0001                  ?___lwmod 0008  
             __smallconst 0800            __size_of_OFFRX 0006                  ?_isdigit 0001  
        ___lwdiv@quotient 0005                  ?_sprintf 000D            ___wmul@product 0005  
                Lcd_Out@x 0004          __CFG_WDTPS$32768 000000                  Lcd_Out@y 0007  
            Lcd_Init@data 0005         ___wmul@multiplier 0001              Lcd_Out2@data 0008  
                _Lcd_Init 0AB6                  _Lcd_Out2 0F7C          __size_of_Lcd_Cmd 00F2  
        __size_of_Lcd_Out 0068                  __Hrparam 0000                  __Lrparam 0000  
        __size_of___lwdiv 0052          __size_of___lwmod 0042               _isdigit$417 0002  
              sprintf@val 001A          __size_of_isdigit 001E            Lcd_Chr_CP@data 0003  
         ___lwdiv@divisor 0003           ___lwdiv@counter 0007                  __ptext10 0BD0  
                __ptext11 0AB6                  __ptext12 0DBE                  __ptext13 0F18  
        __size_of_sprintf 028E             __size_of_ONRX 0006               Lcd_Cmd@data 0003  
           __size_of_main 00F4     __CFG_CPUDIV$OSC1_PLL2 000000               Lcd_Out@data 0008  
         _ConfiSerial9600 0F18                  isdigit@c 0003                 sprintf@ap 0017  
               sprintf@sp 000D          ___lwmod@dividend 0008        ConfiSerial9600@AUX 0005  
                sprintf@c 001F                  sprintf@f 000F       __CFG_FOSC$INTOSC_XT 000000  
         ___lwmod@divisor 000A           ___lwmod@counter 000C  
